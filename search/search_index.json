{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"what \uf0c1 \u8fd9\u91cc\u8bb0\u5f55\u5199\u6211\u5b66STM32MPU\u7684\u4e00\u4e9b\u7b14\u8bb0\u3002 \u6709\u5173\u4e8eSTM32MPU\u7684\u57fa\u672c\u4f7f\u7528\uff0c\u8fd8\u6709Uboot\u3001\u5185\u6838\u3001\u5e94\u7528\u65b9\u9762\u3002 STM32MP \uf0c1 1\u3001\u4ec0\u4e48\u662fSTM32MPU STM32MPU \u662fST\u63a8\u51fa\u7684Cortex-A7 + Cortex-M4\u591a\u6838\u5f02\u6784\u5904\u7406\u5668 STM32MPU151\u662f\u5355\u6838A7+M4\uff0c\u3001STM32MPU153\u3001STM32MPU157\u662f\u53cc\u6838A7+M4\u3002 A7\u6838\u6700\u9ad8\u53ef\u4ee5\u8dd1\u5230650MHZ\uff0cM4\u6838\u6700\u9ad8\u53ef\u4ee5\u8fbe\u5230209MHZ\uff0c 2\u3001\u5f00\u53d1\u8d44\u6e90\uff08ST\u5b98\u65b9\uff09 1.\u786c\u4ef6 \u76ee\u524d\u4e3a\u6b62\uff0820190618\uff09\uff0c\u80fd\u591f\u5728\u5b98\u7f51\u627e\u5230\u7684\u5f00\u53d1\u677f\u67094\u6b3e,\u5206\u4e24\u7c7b\uff1a STM32MP15 Evaluation boards\uff1a STM32MP157A-DK1 \u3001 STM32MP157C-DK2 STM32MP15 Discovery kits\uff1a STM32MP157A-EV1 \u3001 STM32MP157C-EV1 2.\u8f6f\u4ef6 M4\u6838\u65b9\u9762 \uff0cST\u63d0\u4f9b\u4e86 Enhanced STM32Cube \u4e00\u6574\u5957\u5f00\u53d1\u5de5\u5177, \u4ee3\u7801\u751f\u6210\u5de5\u5177\uff1a STM32CubeMX IDE: STM32CubeIDE \u70e7\u5f55\u8f6f\u4ef6\uff1a STM32CubeProg \u8c03\u8bd5\u5de5\u5177\uff1a STM32CubeMonitor family of tools A\u6838\u65b9\u9762 \uff0cST\u63d0\u4f9b\u4e86 OpenSTLinux \u6839\u636e\u4e0d\u540c\u9700\u6c42\uff0cST\u63d0\u4f9b\u4e863\u7c7b\u5f00\u53d1\u5305\uff1a STM32MP1Starter \uff0c \u8fd9\u662fST\u4e3a\u4ed6\u4eec\u7684\u5f00\u53d1\u677f\u63d0\u4f9b\u7684OpenSTLinux\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7528\u6765\u5feb\u901f\u4f53\u9a8c\u3001\u8bc4\u4f30STM32MPU\u7cfb\u5217\u5904\u7406\u5668\u3002 \u76f8\u5173wiki: STM32MP15 Discovery kits - Starter Package STM32MP15 Evaluation boards - Starter Package Developer Package \uff1a\u63d0\u4f9b\u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u5e94\u7528\u6dfb\u52a0\u5230 \u9700\u8981\u54ea\u4e00\u79cd\u5f00\u53d1\u5305\u5462\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc","title":"Home"},{"location":"#what","text":"\u8fd9\u91cc\u8bb0\u5f55\u5199\u6211\u5b66STM32MPU\u7684\u4e00\u4e9b\u7b14\u8bb0\u3002 \u6709\u5173\u4e8eSTM32MPU\u7684\u57fa\u672c\u4f7f\u7528\uff0c\u8fd8\u6709Uboot\u3001\u5185\u6838\u3001\u5e94\u7528\u65b9\u9762\u3002","title":"what"},{"location":"#stm32mp","text":"1\u3001\u4ec0\u4e48\u662fSTM32MPU STM32MPU \u662fST\u63a8\u51fa\u7684Cortex-A7 + Cortex-M4\u591a\u6838\u5f02\u6784\u5904\u7406\u5668 STM32MPU151\u662f\u5355\u6838A7+M4\uff0c\u3001STM32MPU153\u3001STM32MPU157\u662f\u53cc\u6838A7+M4\u3002 A7\u6838\u6700\u9ad8\u53ef\u4ee5\u8dd1\u5230650MHZ\uff0cM4\u6838\u6700\u9ad8\u53ef\u4ee5\u8fbe\u5230209MHZ\uff0c 2\u3001\u5f00\u53d1\u8d44\u6e90\uff08ST\u5b98\u65b9\uff09 1.\u786c\u4ef6 \u76ee\u524d\u4e3a\u6b62\uff0820190618\uff09\uff0c\u80fd\u591f\u5728\u5b98\u7f51\u627e\u5230\u7684\u5f00\u53d1\u677f\u67094\u6b3e,\u5206\u4e24\u7c7b\uff1a STM32MP15 Evaluation boards\uff1a STM32MP157A-DK1 \u3001 STM32MP157C-DK2 STM32MP15 Discovery kits\uff1a STM32MP157A-EV1 \u3001 STM32MP157C-EV1 2.\u8f6f\u4ef6 M4\u6838\u65b9\u9762 \uff0cST\u63d0\u4f9b\u4e86 Enhanced STM32Cube \u4e00\u6574\u5957\u5f00\u53d1\u5de5\u5177, \u4ee3\u7801\u751f\u6210\u5de5\u5177\uff1a STM32CubeMX IDE: STM32CubeIDE \u70e7\u5f55\u8f6f\u4ef6\uff1a STM32CubeProg \u8c03\u8bd5\u5de5\u5177\uff1a STM32CubeMonitor family of tools A\u6838\u65b9\u9762 \uff0cST\u63d0\u4f9b\u4e86 OpenSTLinux \u6839\u636e\u4e0d\u540c\u9700\u6c42\uff0cST\u63d0\u4f9b\u4e863\u7c7b\u5f00\u53d1\u5305\uff1a STM32MP1Starter \uff0c \u8fd9\u662fST\u4e3a\u4ed6\u4eec\u7684\u5f00\u53d1\u677f\u63d0\u4f9b\u7684OpenSTLinux\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7528\u6765\u5feb\u901f\u4f53\u9a8c\u3001\u8bc4\u4f30STM32MPU\u7cfb\u5217\u5904\u7406\u5668\u3002 \u76f8\u5173wiki: STM32MP15 Discovery kits - Starter Package STM32MP15 Evaluation boards - Starter Package Developer Package \uff1a\u63d0\u4f9b\u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u5e94\u7528\u6dfb\u52a0\u5230 \u9700\u8981\u54ea\u4e00\u79cd\u5f00\u53d1\u5305\u5462\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc","title":"STM32MP"},{"location":"about/","text":"","title":"About"},{"location":"app/u8g2/u8g2/","text":"\u73af\u5883 \uf0c1 \u786c\u4ef6\u73af\u5883\uff1aSTM32MP157C-DK2 \u8f6f\u4ef6\uff1a MPU\u4e0a\u4f7f\u7528ST\u5b98\u65b9\u63d0\u4f9b\u7684 STM32MP15x OpenSTLinux Starter Package \u7f16\u8bd1\u7cfb\u7edf\uff1aUbuntu 1604 64bit \u7f16\u8bd1\u5668\uff1aST\u63d0\u4f9b\u7684SDK u8g2 \uf0c1 u8g2\u662f\u9762\u5411\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u5355\u8272\u56fe\u5f62\u5e93\uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u5982\u679c\u4f60\u505a\u4e9b\u5d4c\u5165\u5f0f\u8bbe\u5907\uff0c\u6070\u597d\u662f\u7528\u5355\u8272\u663e\u793a\u8bbe\u5907\uff08\u53ef\u4ee5\u662f\u5355\u8272LCD\uff0cOLED\uff0cLED\u70b9\u9635\u5c4f\u7b49\uff09\uff0c\u7528\u8fd9\u4e2a\u53ef\u5c31\u5f88\u65b9\u4fbf\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528u8g2API\u6765\u663e\u793a\u5b57\u7b26\u6216\u8005\u56fe\u7247\u7b49\uff0c\u4e0d\u7528\u77e5\u9053\u8fd9\u4e9b\u663e\u793a\u8bbe\u5907\u7684\u5e95\u5c42\u64cd\u4f5c\u3002 u8g2 github\u5730\u5740\u662f https://github.com/olikraus/u8g2 \uff0c \u6587\u6863 \uff0c https://github.com/olikraus/u8g2/wiki/gallery \u91cc\u9762\u7684\u4f8b\u5b50\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u90fd\u662fMCU\u7684\uff0c\u5982\u679c\u8981\u5728Linux\u4e0a\u4f7f\u7528\u5462\uff1f\u5df2\u7ecf\u6709\u4eba\u79fb\u690d\u4e86\uff0c\u5728github\u4e0a\u53ef\u4ee5\u627e\u5230\uff1a https://github.com/wuhanstudio/u8g2-arm-linux \u3002 \u5728STM32MP157C-DK2\u4e0a\u4f7f\u7528u8g2 \uf0c1 \u4e0b\u8f7du8g2 \uf0c1 \u9996\u5148\u4e0b\u8f7d\u4e0b\u6765\uff1a \u5728\u76ee\u5f55 u8g2-arm-linux\\examples \u4e0b\u6709\u4e24\u4e2a\u4f8b\u7a0b\uff0c\u4e00\u4e2a\u662fSPI\u9a71\u52a8SSD1306 OLED\uff0c\u4e00\u4e2a\u662fI2C\u524d\u9a71\u52a8SSD1306 OLED\uff0c\u6b63\u597d\u6211\u624b\u4e0a\u6709I2C\u63a5\u53e3\u7684SSD1306 OLED\u6a21\u5757\u3002 \u4fee\u6539\u6e90\u7801 \uf0c1 \u4fee\u6539makefile \u5206\u522b\u628a u8g2-arm-linux/examples\\u8g2_hw_i2c \u548c u8g2-arm-linux\\examples\\u8g2_4wire_hw_spi \u76ee\u5f55\u4e0b\u7684makefile\u4e2d\u7684CC\u8d4b\u503c\u7684\u8bed\u53e5\u6ce8\u91ca\u6389\uff1a \u4fee\u6539\u4f8b\u7a0b \u7136\u540e\u4fee\u6539 u8g2-arm-linux/examples\\u8g2_hw_i2c\\main.c \u6587\u4ef6\uff0c\u539f\u6765\u7684\u7a0b\u5e8f\u5982\u4e0b\u56fe\uff1a \u628a\u663e\u793a\u7684\u6587\u5b57\u4fee\u6539\u4e3a\uff1a U8g2 on STM32MPU \u3002 \u7f16\u8bd1 \uf0c1 \u9996\u5148\u4f7f\u80fdSDK\uff0c\u7136\u540e\u8f93\u5165make\u5c31\u53ef\u4ee5\u7f16\u8bd1\u3002\u7f16\u8bd1\u5b8c\u4e4b\u540e\uff0c\u5c05\u5728bin\u76ee\u5f55\u4e0b\u77e5\u9053\u7f16\u8bd1\u51fa\u6765\u7684\u6587\u4ef6\uff0c \u628abin\u76ee\u5f55\u4e2d\u7684u8g2_hw_i2c\u62f7\u8d1d\u5230STM32MPU\u677f\u5b50\u4e0a\u3002 \u8fde\u63a5\u786c\u4ef6\u5e76\u6d4b\u8bd5\u7a0b\u5e8f \uf0c1 \u8be5\u4f8b\u5b50\u4f7f\u7528\u7684I2C\u662fi2c-0: STM32MP157C-DK2\u5f15\u51fa\u7684IO\u5982\u4e0b\uff1a \u628a\u663e\u793a\u5668\u8fde\u4e0a\u677f\u5b50\uff0c\u6267\u884c\u7a0b\u5e8f\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u663e\u793a\u677f\u5b50\u7684IP\u5730\u5740 \uf0c1 \u5c1d\u8bd5\u4f7f\u7528\u4e0bu8g2,\u8bd5\u7740\u5728OLED\u4e0a\u663e\u793a\u677f\u5b50\u7684IP\u5730\u5740\uff0c \u53c2\u8003: https://blog.csdn.net/dpjcn1990/article/details/92831760#21_U8g2_26","title":"u8g2"},{"location":"app/u8g2/u8g2/#_1","text":"\u786c\u4ef6\u73af\u5883\uff1aSTM32MP157C-DK2 \u8f6f\u4ef6\uff1a MPU\u4e0a\u4f7f\u7528ST\u5b98\u65b9\u63d0\u4f9b\u7684 STM32MP15x OpenSTLinux Starter Package \u7f16\u8bd1\u7cfb\u7edf\uff1aUbuntu 1604 64bit \u7f16\u8bd1\u5668\uff1aST\u63d0\u4f9b\u7684SDK","title":"\u73af\u5883"},{"location":"app/u8g2/u8g2/#u8g2","text":"u8g2\u662f\u9762\u5411\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u5355\u8272\u56fe\u5f62\u5e93\uff0c\u4ec0\u4e48\u610f\u601d\u5462\uff0c\u5982\u679c\u4f60\u505a\u4e9b\u5d4c\u5165\u5f0f\u8bbe\u5907\uff0c\u6070\u597d\u662f\u7528\u5355\u8272\u663e\u793a\u8bbe\u5907\uff08\u53ef\u4ee5\u662f\u5355\u8272LCD\uff0cOLED\uff0cLED\u70b9\u9635\u5c4f\u7b49\uff09\uff0c\u7528\u8fd9\u4e2a\u53ef\u5c31\u5f88\u65b9\u4fbf\u4e86\uff0c\u76f4\u63a5\u4f7f\u7528u8g2API\u6765\u663e\u793a\u5b57\u7b26\u6216\u8005\u56fe\u7247\u7b49\uff0c\u4e0d\u7528\u77e5\u9053\u8fd9\u4e9b\u663e\u793a\u8bbe\u5907\u7684\u5e95\u5c42\u64cd\u4f5c\u3002 u8g2 github\u5730\u5740\u662f https://github.com/olikraus/u8g2 \uff0c \u6587\u6863 \uff0c https://github.com/olikraus/u8g2/wiki/gallery \u91cc\u9762\u7684\u4f8b\u5b50\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u90fd\u662fMCU\u7684\uff0c\u5982\u679c\u8981\u5728Linux\u4e0a\u4f7f\u7528\u5462\uff1f\u5df2\u7ecf\u6709\u4eba\u79fb\u690d\u4e86\uff0c\u5728github\u4e0a\u53ef\u4ee5\u627e\u5230\uff1a https://github.com/wuhanstudio/u8g2-arm-linux \u3002","title":"u8g2"},{"location":"app/u8g2/u8g2/#stm32mp157c-dk2u8g2","text":"","title":"\u5728STM32MP157C-DK2\u4e0a\u4f7f\u7528u8g2"},{"location":"app/u8g2/u8g2/#u8g2_1","text":"\u9996\u5148\u4e0b\u8f7d\u4e0b\u6765\uff1a \u5728\u76ee\u5f55 u8g2-arm-linux\\examples \u4e0b\u6709\u4e24\u4e2a\u4f8b\u7a0b\uff0c\u4e00\u4e2a\u662fSPI\u9a71\u52a8SSD1306 OLED\uff0c\u4e00\u4e2a\u662fI2C\u524d\u9a71\u52a8SSD1306 OLED\uff0c\u6b63\u597d\u6211\u624b\u4e0a\u6709I2C\u63a5\u53e3\u7684SSD1306 OLED\u6a21\u5757\u3002","title":"\u4e0b\u8f7du8g2"},{"location":"app/u8g2/u8g2/#_2","text":"\u4fee\u6539makefile \u5206\u522b\u628a u8g2-arm-linux/examples\\u8g2_hw_i2c \u548c u8g2-arm-linux\\examples\\u8g2_4wire_hw_spi \u76ee\u5f55\u4e0b\u7684makefile\u4e2d\u7684CC\u8d4b\u503c\u7684\u8bed\u53e5\u6ce8\u91ca\u6389\uff1a \u4fee\u6539\u4f8b\u7a0b \u7136\u540e\u4fee\u6539 u8g2-arm-linux/examples\\u8g2_hw_i2c\\main.c \u6587\u4ef6\uff0c\u539f\u6765\u7684\u7a0b\u5e8f\u5982\u4e0b\u56fe\uff1a \u628a\u663e\u793a\u7684\u6587\u5b57\u4fee\u6539\u4e3a\uff1a U8g2 on STM32MPU \u3002","title":"\u4fee\u6539\u6e90\u7801"},{"location":"app/u8g2/u8g2/#_3","text":"\u9996\u5148\u4f7f\u80fdSDK\uff0c\u7136\u540e\u8f93\u5165make\u5c31\u53ef\u4ee5\u7f16\u8bd1\u3002\u7f16\u8bd1\u5b8c\u4e4b\u540e\uff0c\u5c05\u5728bin\u76ee\u5f55\u4e0b\u77e5\u9053\u7f16\u8bd1\u51fa\u6765\u7684\u6587\u4ef6\uff0c \u628abin\u76ee\u5f55\u4e2d\u7684u8g2_hw_i2c\u62f7\u8d1d\u5230STM32MPU\u677f\u5b50\u4e0a\u3002","title":"\u7f16\u8bd1"},{"location":"app/u8g2/u8g2/#_4","text":"\u8be5\u4f8b\u5b50\u4f7f\u7528\u7684I2C\u662fi2c-0: STM32MP157C-DK2\u5f15\u51fa\u7684IO\u5982\u4e0b\uff1a \u628a\u663e\u793a\u5668\u8fde\u4e0a\u677f\u5b50\uff0c\u6267\u884c\u7a0b\u5e8f\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a","title":"\u8fde\u63a5\u786c\u4ef6\u5e76\u6d4b\u8bd5\u7a0b\u5e8f"},{"location":"app/u8g2/u8g2/#ip","text":"\u5c1d\u8bd5\u4f7f\u7528\u4e0bu8g2,\u8bd5\u7740\u5728OLED\u4e0a\u663e\u793a\u677f\u5b50\u7684IP\u5730\u5740\uff0c \u53c2\u8003: https://blog.csdn.net/dpjcn1990/article/details/92831760#21_U8g2_26","title":"\u663e\u793a\u677f\u5b50\u7684IP\u5730\u5740"},{"location":"kernel/start/","text":"kernel \uf0c1 \u4e0b\u8f7d \u4e0b\u8f7d\u94fe\u63a5\uff1a https://www.st.com/content/ccc/resource/technical/sw-updater/firmware2/group0/d1/01/38/fc/a8/61/4f/e9/STM32cube_Standard_A7_BSP_components_kernel/files/SOURCES-kernel-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz/jcr:content/translations/en.SOURCES-kernel-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u89e3\u538b tar xvf en.SOURCES-kernel-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u6253\u8865\u4e01 for p in `ls -1 ../*.patch`; do patch -p1 < $p; done make multi_v7_defconfig fragment*.config for f in `ls -1 ../fragment*.config`; do scripts/kconfig/merge_config.sh -m -r .config $f; done yes '' | make oldconfig \u7f16\u8bd1\u5185\u6838 make uImage vmlinux dtbs LOADADDR=0xC2000040 \u53c2\u8003 \uf0c1 Modify,_rebuild_and_reload_the_Linux\u00ae_kernel STM32MP1_Developer_Package Linux.README.HOW_TO","title":"\u83b7\u53d6\u5185\u6838\u6e90\u7801\u53ca\u7f16\u8bd1"},{"location":"kernel/start/#kernel","text":"\u4e0b\u8f7d \u4e0b\u8f7d\u94fe\u63a5\uff1a https://www.st.com/content/ccc/resource/technical/sw-updater/firmware2/group0/d1/01/38/fc/a8/61/4f/e9/STM32cube_Standard_A7_BSP_components_kernel/files/SOURCES-kernel-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz/jcr:content/translations/en.SOURCES-kernel-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u89e3\u538b tar xvf en.SOURCES-kernel-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u6253\u8865\u4e01 for p in `ls -1 ../*.patch`; do patch -p1 < $p; done make multi_v7_defconfig fragment*.config for f in `ls -1 ../fragment*.config`; do scripts/kconfig/merge_config.sh -m -r .config $f; done yes '' | make oldconfig \u7f16\u8bd1\u5185\u6838 make uImage vmlinux dtbs LOADADDR=0xC2000040","title":"kernel"},{"location":"kernel/start/#_1","text":"Modify,_rebuild_and_reload_the_Linux\u00ae_kernel STM32MP1_Developer_Package Linux.README.HOW_TO","title":"\u53c2\u8003"},{"location":"kernel/fbtft/01/","text":"\u4ec0\u4e48\u662ffbtft \uf0c1 fbtft\u5728github\u4e2d\u7684\u4ecb\u7ecd\u662f\u201c Linux Framebuffer drivers for small TFT LCD display modules \uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\u652f\u6301\u5c0f\u578bTFT LCD\u663e\u793a\u5668\u7684Linux FrameBuffer\u9a71\u52a8\u3002\u4e5f\u5c31\u662f\u4e13\u95e8\u4e3a\u5c0f\u578bTFT LCD\u6240\u5199\u7684Framebuffer\u9a71\u52a8\u3002 github\u5730\u5740\u4e3a\uff1a notro/fbtft wiki\u5730\u5740\u4e3a\uff1a notro/wiki \u4ecefbtft\u7684github\u4e0a\u770b\uff0cfbtft\u4e0d\u5728\u66f4\u65b0\u5230github\u4e86\uff0c\u8fc1\u79fb\u5230\u4e86Linux kernel staging tree\u3002\u5728 https://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git/tree/drivers/staging/fbtft?h=staging-testing \u4e2d\u770b\u5230fbtft\u6240\u652f\u6301\u7684\u8bbe\u5907\u6709\uff1a fbtft\u5728STM32MP15X\u4e2d \uf0c1 \u5728STM32MP1X\u76844.19\u5185\u6838\u6e90\u7801\u4e2d\uff0cfbtft\u6e90\u7801\u5728\u5185\u6838\u6839\u76ee\u5f55\u7684\uff1a drivers\\staging\\fbtft \u3002 \u5982\u4f55\u4f7f\u7528 \uf0c1 \u6211\u624b\u4e0a\u6709st7735r\u8ddfIli9341\u7684\u5c4f\uff0c\u770b\u4e86\u4e0bfbtft\u91cc\u9762\u7684\u6e90\u7801\u6b63\u597d\u6709st7735r\u8ddfIli9341\u9a71\u52a8\uff0c\u5148\u8bd5\u4e0bst7735r\u7684\u5c4f\uff0c \u5728\u6587\u4ef6 drivers\\staging\\fbtft\\fb_st7735r.c \u4e2d\uff1a static struct fbtft_display display = { .regwidth = 8, .width = 128, .height = 160, .init_sequence = default_init_sequence, .gamma_num = 2, .gamma_len = 16, .gamma = DEFAULT_GAMMA, .fbtftops = { .set_addr_win = set_addr_win, .set_var = set_var, .set_gamma = set_gamma, }, }; FBTFT_REGISTER_DRIVER(DRVNAME, \"sitronix,st7735r\", &display); FBTFT_REGISTER_DRIVER \u5c55\u5f00\u540e\u5982\u4e0b\uff1a #define FBTFT_REGISTER_DRIVER(_name, _compatible, _display) \\ \\ static int fbtft_driver_probe_spi(struct spi_device *spi) \\ { \\ return fbtft_probe_common(_display, spi, NULL); \\ } \\ \\ static int fbtft_driver_remove_spi(struct spi_device *spi) \\ { \\ struct fb_info *info = spi_get_drvdata(spi); \\ \\ return fbtft_remove_common(&spi->dev, info); \\ } \\ \\ static int fbtft_driver_probe_pdev(struct platform_device *pdev) \\ { \\ return fbtft_probe_common(_display, NULL, pdev); \\ } \\ \\ static int fbtft_driver_remove_pdev(struct platform_device *pdev) \\ { \\ struct fb_info *info = platform_get_drvdata(pdev); \\ \\ return fbtft_remove_common(&pdev->dev, info); \\ } \\ \\ static const struct of_device_id dt_ids[] = { \\ { .compatible = _compatible }, \\ {}, \\ }; \\ \\ MODULE_DEVICE_TABLE(of, dt_ids); \\ \u6709\u8fd9\u4e48\u6761\u8bed\u53e5\uff1a MODULE_DEVICE_TABLE(of, dt_ids); \u3002\u4e5f\u5c31\u662f\u8bf4\u8981\u4f7f\u7528\u8be5\u8bbe\u5907\uff0c\u9700\u8981\u4fee\u6539\u8bbe\u5907\u6811\u3002 \u4fee\u6539\u6e90\u7801 \uf0c1 \u9996\u5148\u5728make menuconfig\u4e2d\u628afbtft\u52a0\u4e0a\uff1a 1\u3001\u4fee\u6539\u8bbe\u5907\u6811 \u7531\u4e8e\u6211\u7684\u5c4f\u662f\u63a5\u5728STM32MP157c\u7684SPI5\uff0c\u6240\u4ee5\u5728\u8bbe\u5907\u6811\u4e2dspi5\u4e0b\u9762\u6dfb\u52a0\u5c4f\u7684\u8bbe\u5907\u6570,CS\u811a\u63a5\u5230STM32MP157C\u7684GPIOF 6\uff0cDC\u811a\u63a5\u5230GPIOF 3\u811a\uff0cRESET\u811a\u63a5\u5230GPIOD 13\uff0c\u8bbe\u5907\u6570\u4fee\u6539\u4e3a\u5982\u4e0b\uff1a &spi5 { pinctrl-names = \"default\", \"sleep\"; pinctrl-0 = <&spi5_pins_a>; pinctrl-1 = <&spi5_sleep_pins_a>; cs-gpios = <&gpiof 6 GPIO_ACTIVE_HIGH>; status = \"okay\"; st7735r@0{ compatible = \"jianda,jd-t18003-t01\", \"sitronix,st7735r\"; reg = <0>; spi-max-frequency = <32000000>; dc-gpios = <&gpiof 3 GPIO_ACTIVE_HIGH>; reset-gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>; rotation = <270>; backlight = &backlight; }; }; \u7f16\u8bd1\u5e76\u628a\u8bbe\u5907\u6811\u8ddf\u5185\u6838\u66f4\u65b0\u5230\u677f\u5b50\u4e0a\uff0c\u542f\u52a8\uff0c\u770b\u5c4f\u6ca1\u4ec0\u4e48\u53cd\u5e94\uff0c /dev \u4e0b\u4e5f\u6ca1\u6709 fb \u8bbe\u5907\uff0c\u67e5\u770bspi\u76f8\u5173\u4fe1\u606f\uff1a root@stm32mp1:~# dmesg | grep \"spi\" [ 1.543185] spi_stm32 44009000.spi: 8 x 8-bit fifo size [ 1.543206] spi_stm32 44009000.spi: 16-bit maximum data frame [ 1.543670] spi_stm32 44009000.spi: registered master spi0 [ 1.543900] spi spi0.0: stm32_spi_setup: set gpio86 output high [ 1.543943] spi spi0.0: setup mode 0, 8 bits/w, 32000000 Hz max --> 0 [ 1.544232] spi_stm32 44009000.spi: registered child spi0.0 [ 1.544245] spi_stm32 44009000.spi: driver initialized [ 2.097755] fb_st7735r spi0.0: buswidth is not set [ 2.102334] fb_st7735r: probe of spi0.0 failed with error -22 \u6709\u9519\u8bef\uff0c\u4e0a\u7f51\u67e5\u4e86\u4e0b\u8d44\u6599\uff0c\u89c9\u5f97\u53ef\u80fd\u662f\u6ca1\u6709\u6dfb\u52a0buswidth\uff0c\u5728\u8bbe\u5907\u6811\u79cd\u628abuswitch\u52a0\u4e0a\uff1a &spi5 { pinctrl-names = \"default\", \"sleep\"; pinctrl-0 = <&spi5_pins_a>; pinctrl-1 = <&spi5_sleep_pins_a>; cs-gpios = <&gpiof 6 GPIO_ACTIVE_HIGH>; status = \"okay\"; st7735r@0{ compatible = \"jianda,jd-t18003-t01\", \"sitronix,st7735r\"; reg = <0>; buswidth = <8>; spi-max-frequency = <32000000>; dc-gpios = <&gpiof 3 GPIO_ACTIVE_HIGH>; reset-gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>; rotation = <270>; backlight = &backlight; }; }; \u91cd\u65b0\u66f4\u65b0\u677f\u5b50\u4e0a\u7684\u8bbe\u5907\u6811\uff0c\u4e0a\u7535\uff0c\u53ef\u4ee5\u770b\u5230\u5c4f\u5e55\u6709\u767d\u8272\u53d8\u9ed1\u8272\uff0c\u5e94\u8be5\u662f\u53ef\u4ee5\u4e86\uff0c\u5728 /dev \u4e0b\u53ef\u4ee5\u770b\u5230\u591a\u4e86\u4e2afb\u8bbe\u5907: \u6d4b\u8bd5 \uf0c1 \u5728\u5c4f\u4e0a\u663e\u793a\u968f\u673a\u6570\uff1a cat /dev/urandom > /dev/fb0","title":"\u4ec0\u4e48\u662ffbtft&\u5728STM32MP15x\u4e2d\u4f7f\u7528fbtft"},{"location":"kernel/fbtft/01/#fbtft","text":"fbtft\u5728github\u4e2d\u7684\u4ecb\u7ecd\u662f\u201c Linux Framebuffer drivers for small TFT LCD display modules \uff0c\u7ffb\u8bd1\u8fc7\u6765\u5c31\u662f\u652f\u6301\u5c0f\u578bTFT LCD\u663e\u793a\u5668\u7684Linux FrameBuffer\u9a71\u52a8\u3002\u4e5f\u5c31\u662f\u4e13\u95e8\u4e3a\u5c0f\u578bTFT LCD\u6240\u5199\u7684Framebuffer\u9a71\u52a8\u3002 github\u5730\u5740\u4e3a\uff1a notro/fbtft wiki\u5730\u5740\u4e3a\uff1a notro/wiki \u4ecefbtft\u7684github\u4e0a\u770b\uff0cfbtft\u4e0d\u5728\u66f4\u65b0\u5230github\u4e86\uff0c\u8fc1\u79fb\u5230\u4e86Linux kernel staging tree\u3002\u5728 https://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git/tree/drivers/staging/fbtft?h=staging-testing \u4e2d\u770b\u5230fbtft\u6240\u652f\u6301\u7684\u8bbe\u5907\u6709\uff1a","title":"\u4ec0\u4e48\u662ffbtft"},{"location":"kernel/fbtft/01/#fbtftstm32mp15x","text":"\u5728STM32MP1X\u76844.19\u5185\u6838\u6e90\u7801\u4e2d\uff0cfbtft\u6e90\u7801\u5728\u5185\u6838\u6839\u76ee\u5f55\u7684\uff1a drivers\\staging\\fbtft \u3002","title":"fbtft\u5728STM32MP15X\u4e2d"},{"location":"kernel/fbtft/01/#_1","text":"\u6211\u624b\u4e0a\u6709st7735r\u8ddfIli9341\u7684\u5c4f\uff0c\u770b\u4e86\u4e0bfbtft\u91cc\u9762\u7684\u6e90\u7801\u6b63\u597d\u6709st7735r\u8ddfIli9341\u9a71\u52a8\uff0c\u5148\u8bd5\u4e0bst7735r\u7684\u5c4f\uff0c \u5728\u6587\u4ef6 drivers\\staging\\fbtft\\fb_st7735r.c \u4e2d\uff1a static struct fbtft_display display = { .regwidth = 8, .width = 128, .height = 160, .init_sequence = default_init_sequence, .gamma_num = 2, .gamma_len = 16, .gamma = DEFAULT_GAMMA, .fbtftops = { .set_addr_win = set_addr_win, .set_var = set_var, .set_gamma = set_gamma, }, }; FBTFT_REGISTER_DRIVER(DRVNAME, \"sitronix,st7735r\", &display); FBTFT_REGISTER_DRIVER \u5c55\u5f00\u540e\u5982\u4e0b\uff1a #define FBTFT_REGISTER_DRIVER(_name, _compatible, _display) \\ \\ static int fbtft_driver_probe_spi(struct spi_device *spi) \\ { \\ return fbtft_probe_common(_display, spi, NULL); \\ } \\ \\ static int fbtft_driver_remove_spi(struct spi_device *spi) \\ { \\ struct fb_info *info = spi_get_drvdata(spi); \\ \\ return fbtft_remove_common(&spi->dev, info); \\ } \\ \\ static int fbtft_driver_probe_pdev(struct platform_device *pdev) \\ { \\ return fbtft_probe_common(_display, NULL, pdev); \\ } \\ \\ static int fbtft_driver_remove_pdev(struct platform_device *pdev) \\ { \\ struct fb_info *info = platform_get_drvdata(pdev); \\ \\ return fbtft_remove_common(&pdev->dev, info); \\ } \\ \\ static const struct of_device_id dt_ids[] = { \\ { .compatible = _compatible }, \\ {}, \\ }; \\ \\ MODULE_DEVICE_TABLE(of, dt_ids); \\ \u6709\u8fd9\u4e48\u6761\u8bed\u53e5\uff1a MODULE_DEVICE_TABLE(of, dt_ids); \u3002\u4e5f\u5c31\u662f\u8bf4\u8981\u4f7f\u7528\u8be5\u8bbe\u5907\uff0c\u9700\u8981\u4fee\u6539\u8bbe\u5907\u6811\u3002","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"kernel/fbtft/01/#_2","text":"\u9996\u5148\u5728make menuconfig\u4e2d\u628afbtft\u52a0\u4e0a\uff1a 1\u3001\u4fee\u6539\u8bbe\u5907\u6811 \u7531\u4e8e\u6211\u7684\u5c4f\u662f\u63a5\u5728STM32MP157c\u7684SPI5\uff0c\u6240\u4ee5\u5728\u8bbe\u5907\u6811\u4e2dspi5\u4e0b\u9762\u6dfb\u52a0\u5c4f\u7684\u8bbe\u5907\u6570,CS\u811a\u63a5\u5230STM32MP157C\u7684GPIOF 6\uff0cDC\u811a\u63a5\u5230GPIOF 3\u811a\uff0cRESET\u811a\u63a5\u5230GPIOD 13\uff0c\u8bbe\u5907\u6570\u4fee\u6539\u4e3a\u5982\u4e0b\uff1a &spi5 { pinctrl-names = \"default\", \"sleep\"; pinctrl-0 = <&spi5_pins_a>; pinctrl-1 = <&spi5_sleep_pins_a>; cs-gpios = <&gpiof 6 GPIO_ACTIVE_HIGH>; status = \"okay\"; st7735r@0{ compatible = \"jianda,jd-t18003-t01\", \"sitronix,st7735r\"; reg = <0>; spi-max-frequency = <32000000>; dc-gpios = <&gpiof 3 GPIO_ACTIVE_HIGH>; reset-gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>; rotation = <270>; backlight = &backlight; }; }; \u7f16\u8bd1\u5e76\u628a\u8bbe\u5907\u6811\u8ddf\u5185\u6838\u66f4\u65b0\u5230\u677f\u5b50\u4e0a\uff0c\u542f\u52a8\uff0c\u770b\u5c4f\u6ca1\u4ec0\u4e48\u53cd\u5e94\uff0c /dev \u4e0b\u4e5f\u6ca1\u6709 fb \u8bbe\u5907\uff0c\u67e5\u770bspi\u76f8\u5173\u4fe1\u606f\uff1a root@stm32mp1:~# dmesg | grep \"spi\" [ 1.543185] spi_stm32 44009000.spi: 8 x 8-bit fifo size [ 1.543206] spi_stm32 44009000.spi: 16-bit maximum data frame [ 1.543670] spi_stm32 44009000.spi: registered master spi0 [ 1.543900] spi spi0.0: stm32_spi_setup: set gpio86 output high [ 1.543943] spi spi0.0: setup mode 0, 8 bits/w, 32000000 Hz max --> 0 [ 1.544232] spi_stm32 44009000.spi: registered child spi0.0 [ 1.544245] spi_stm32 44009000.spi: driver initialized [ 2.097755] fb_st7735r spi0.0: buswidth is not set [ 2.102334] fb_st7735r: probe of spi0.0 failed with error -22 \u6709\u9519\u8bef\uff0c\u4e0a\u7f51\u67e5\u4e86\u4e0b\u8d44\u6599\uff0c\u89c9\u5f97\u53ef\u80fd\u662f\u6ca1\u6709\u6dfb\u52a0buswidth\uff0c\u5728\u8bbe\u5907\u6811\u79cd\u628abuswitch\u52a0\u4e0a\uff1a &spi5 { pinctrl-names = \"default\", \"sleep\"; pinctrl-0 = <&spi5_pins_a>; pinctrl-1 = <&spi5_sleep_pins_a>; cs-gpios = <&gpiof 6 GPIO_ACTIVE_HIGH>; status = \"okay\"; st7735r@0{ compatible = \"jianda,jd-t18003-t01\", \"sitronix,st7735r\"; reg = <0>; buswidth = <8>; spi-max-frequency = <32000000>; dc-gpios = <&gpiof 3 GPIO_ACTIVE_HIGH>; reset-gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>; rotation = <270>; backlight = &backlight; }; }; \u91cd\u65b0\u66f4\u65b0\u677f\u5b50\u4e0a\u7684\u8bbe\u5907\u6811\uff0c\u4e0a\u7535\uff0c\u53ef\u4ee5\u770b\u5230\u5c4f\u5e55\u6709\u767d\u8272\u53d8\u9ed1\u8272\uff0c\u5e94\u8be5\u662f\u53ef\u4ee5\u4e86\uff0c\u5728 /dev \u4e0b\u53ef\u4ee5\u770b\u5230\u591a\u4e86\u4e2afb\u8bbe\u5907:","title":"\u4fee\u6539\u6e90\u7801"},{"location":"kernel/fbtft/01/#_3","text":"\u5728\u5c4f\u4e0a\u663e\u793a\u968f\u673a\u6570\uff1a cat /dev/urandom > /dev/fb0","title":"\u6d4b\u8bd5"},{"location":"kernel/fbtft/02/","text":"\u914d\u7f6e \uf0c1 \u8ddf\u4e4b\u524d\u7528fbtft\u9a71\u52a8st7735r\u4e00\u6837\uff0c\u5148\u7528make menuconfig\u914d\u7f6e\u5185\u6838\uff0c\u6dfb\u52a0fbtft\u3002\u7136\u540e\u4fee\u6539\u8bbe\u5907\u6811\uff0c\u540c\u6837\u662f\u5728\u8bbe\u5907\u6811spi5\u4e0b\u6dfb\u52a0\uff1a ili9341@0{ compatible = \"adafruit,yx240qv29\", \"ilitek,ili9341\"; reg = <0>; spi-max-frequency = <32000000>; buswidth=<8>; dc-gpios = <&gpiof 3 GPIO_ACTIVE_HIGH>; reset-gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>; rotation = <270>; bgr; }; \u7f16\u8bd1\uff0c\u66f4\u65b0\u677f\u5b50\u4e0a\u7684\u5185\u6838\u8ddf\u8bbe\u5907\u6811\uff0c\u542f\u52a8\uff0c\u5c4f\u7531\u767d\u53d8\u9ed1\uff0c\u8bf4\u660e\u9a71\u52a8\u5e94\u8be5\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u770b\u4e0b\u542f\u52a8\u4fe1\u606f\u4e2d\u8ddffb\u6709\u5173\u7684\u90e8\u5206\uff1a root@stm32mp1:~# dmesg | grep \"fb\" [ 2.091619] fbtft_of_value: buswidth = 8 [ 2.416500] graphics fb0: fb_ili9341 frame buffer, 240x320, 150 KiB video memory, 16 KiB buffer memory, fps=20, spi0.0 at 32 MHz \u53ef\u4ee5\u770b\u5230LCD\u7684\u76f8\u5173\u4fe1\u606f\u3002 \u7b80\u5355\u6d4b\u8bd5 \uf0c1 \u914d\u7f6e\u4e00\u4e0b\uff0c\u5f00\u673a\u7684\u65f6\u5019\u663e\u793aLinux Logo: \u663e\u793a\u968f\u673a\u6570\uff1a \u7cfb\u7edf\u81ea\u5e26\u5de5\u5177 \uf0c1 \u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u610f\u4e2d\u53d1\u73b0\u7cfb\u7edf\u4e2d\u81ea\u5e26\u4e86framebuffer\u6d4b\u8bd5\u5de5\u5177\uff1a \u4f7f\u7528fb-test\u6d4b\u8bd5 \u7ed3\u679c\u5982\u4e0b\uff1a \u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5LCD\u9a71\u52a8\u6b63\u4e0d\u6b63\u5e38 \u4f7f\u7528fb-rect \u8fd0\u884c\u8be5\u547d\u4ee4\u540e\uff0cLCD\u4e0a\u4e00\u76f4\u90fd\u5728\u663e\u793a\u4e0d\u540c\u5c3a\u5bf8\u4e0d\u540c\u989c\u8272\u7684\u65b9\u5757\uff1a \u4f7f\u7528fb-perf \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a littlevgl \uf0c1 littlevgl\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5d4c\u5165\u5f0fGUI\u5e93\uff0c\u8be6\u7ec6\u4fe1\u606f\u67e5\u770b\u5b98\u7f51\uff1a https://littlevgl.com/ \u3002 littlevgl\u652f\u6301Linux\uff0c\u5de5\u7a0b\u5730\u5740\u4e3a\uff1a https://github.com/littlevgl/lv_linux_frame_buffer \u9996\u5148\u4e0b\u8f7d\u4e0b\u6765\uff1a git clone --recursive https://github.com/littlevgl/lv_linux_frame_buffer.git \u4e0b\u8f7d\u4e0b\u6765\u540e\uff0c\u5148\u4fee\u6539 lv_conf.h \uff0c\u4ee5\u4e0b3\u4e2a\u53c2\u6570\u9700\u8981\u8ddf\u6240\u7528LCD\u4e00\u6837\uff1a \u5728\u6587\u4ef6 lv_drv_conf.h \u4e2d\uff0c\u786e\u8ba4\u7a0b\u5e8f\u4e2d\u6240\u7528\u8bbe\u5907\u662f\u5426\u4e3a\u6240\u7528\u8bbe\u5907\u5bf9\u5e94\u7684fb\u8bbe\u5907\uff0c\u5982\u4e0b\u56fe\uff0c\u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u662f\u7528fb0\uff0c\u5982\u679c\u4e0d\u662ffb0\uff0c\u9700\u8981\u505a\u76f8\u5e94\u4fee\u6539\uff1a \u7136\u540e\u76f4\u63a5\u8f93\u5165make\uff0c\u7f16\u8bd1\uff0c\u7f16\u8bd1\u7684\u90e8\u5206\u4fe1\u606f\u5982\u4e0b\uff1a \u7f16\u8bd1\u5b8c\u6210\u540e\u628a\u7f16\u8bd1\u51fa\u6765\u7684\u53ef\u6267\u884c\u6587\u4ef6demo\u62f7\u8d1d\u5230STM32MP157c\u7684\u677f\u5b50\u4e0a\uff0c\u5e76\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a","title":"\u4f7f\u7528ILI9341"},{"location":"kernel/fbtft/02/#_1","text":"\u8ddf\u4e4b\u524d\u7528fbtft\u9a71\u52a8st7735r\u4e00\u6837\uff0c\u5148\u7528make menuconfig\u914d\u7f6e\u5185\u6838\uff0c\u6dfb\u52a0fbtft\u3002\u7136\u540e\u4fee\u6539\u8bbe\u5907\u6811\uff0c\u540c\u6837\u662f\u5728\u8bbe\u5907\u6811spi5\u4e0b\u6dfb\u52a0\uff1a ili9341@0{ compatible = \"adafruit,yx240qv29\", \"ilitek,ili9341\"; reg = <0>; spi-max-frequency = <32000000>; buswidth=<8>; dc-gpios = <&gpiof 3 GPIO_ACTIVE_HIGH>; reset-gpios = <&gpiod 13 GPIO_ACTIVE_HIGH>; rotation = <270>; bgr; }; \u7f16\u8bd1\uff0c\u66f4\u65b0\u677f\u5b50\u4e0a\u7684\u5185\u6838\u8ddf\u8bbe\u5907\u6811\uff0c\u542f\u52a8\uff0c\u5c4f\u7531\u767d\u53d8\u9ed1\uff0c\u8bf4\u660e\u9a71\u52a8\u5e94\u8be5\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u770b\u4e0b\u542f\u52a8\u4fe1\u606f\u4e2d\u8ddffb\u6709\u5173\u7684\u90e8\u5206\uff1a root@stm32mp1:~# dmesg | grep \"fb\" [ 2.091619] fbtft_of_value: buswidth = 8 [ 2.416500] graphics fb0: fb_ili9341 frame buffer, 240x320, 150 KiB video memory, 16 KiB buffer memory, fps=20, spi0.0 at 32 MHz \u53ef\u4ee5\u770b\u5230LCD\u7684\u76f8\u5173\u4fe1\u606f\u3002","title":"\u914d\u7f6e"},{"location":"kernel/fbtft/02/#_2","text":"\u914d\u7f6e\u4e00\u4e0b\uff0c\u5f00\u673a\u7684\u65f6\u5019\u663e\u793aLinux Logo: \u663e\u793a\u968f\u673a\u6570\uff1a","title":"\u7b80\u5355\u6d4b\u8bd5"},{"location":"kernel/fbtft/02/#_3","text":"\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u610f\u4e2d\u53d1\u73b0\u7cfb\u7edf\u4e2d\u81ea\u5e26\u4e86framebuffer\u6d4b\u8bd5\u5de5\u5177\uff1a \u4f7f\u7528fb-test\u6d4b\u8bd5 \u7ed3\u679c\u5982\u4e0b\uff1a \u8fd9\u4e2a\u5de5\u5177\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5LCD\u9a71\u52a8\u6b63\u4e0d\u6b63\u5e38 \u4f7f\u7528fb-rect \u8fd0\u884c\u8be5\u547d\u4ee4\u540e\uff0cLCD\u4e0a\u4e00\u76f4\u90fd\u5728\u663e\u793a\u4e0d\u540c\u5c3a\u5bf8\u4e0d\u540c\u989c\u8272\u7684\u65b9\u5757\uff1a \u4f7f\u7528fb-perf \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a","title":"\u7cfb\u7edf\u81ea\u5e26\u5de5\u5177"},{"location":"kernel/fbtft/02/#littlevgl","text":"littlevgl\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5d4c\u5165\u5f0fGUI\u5e93\uff0c\u8be6\u7ec6\u4fe1\u606f\u67e5\u770b\u5b98\u7f51\uff1a https://littlevgl.com/ \u3002 littlevgl\u652f\u6301Linux\uff0c\u5de5\u7a0b\u5730\u5740\u4e3a\uff1a https://github.com/littlevgl/lv_linux_frame_buffer \u9996\u5148\u4e0b\u8f7d\u4e0b\u6765\uff1a git clone --recursive https://github.com/littlevgl/lv_linux_frame_buffer.git \u4e0b\u8f7d\u4e0b\u6765\u540e\uff0c\u5148\u4fee\u6539 lv_conf.h \uff0c\u4ee5\u4e0b3\u4e2a\u53c2\u6570\u9700\u8981\u8ddf\u6240\u7528LCD\u4e00\u6837\uff1a \u5728\u6587\u4ef6 lv_drv_conf.h \u4e2d\uff0c\u786e\u8ba4\u7a0b\u5e8f\u4e2d\u6240\u7528\u8bbe\u5907\u662f\u5426\u4e3a\u6240\u7528\u8bbe\u5907\u5bf9\u5e94\u7684fb\u8bbe\u5907\uff0c\u5982\u4e0b\u56fe\uff0c\u7a0b\u5e8f\u4e2d\u9ed8\u8ba4\u662f\u7528fb0\uff0c\u5982\u679c\u4e0d\u662ffb0\uff0c\u9700\u8981\u505a\u76f8\u5e94\u4fee\u6539\uff1a \u7136\u540e\u76f4\u63a5\u8f93\u5165make\uff0c\u7f16\u8bd1\uff0c\u7f16\u8bd1\u7684\u90e8\u5206\u4fe1\u606f\u5982\u4e0b\uff1a \u7f16\u8bd1\u5b8c\u6210\u540e\u628a\u7f16\u8bd1\u51fa\u6765\u7684\u53ef\u6267\u884c\u6587\u4ef6demo\u62f7\u8d1d\u5230STM32MP157c\u7684\u677f\u5b50\u4e0a\uff0c\u5e76\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a","title":"littlevgl"},{"location":"kernel/fbtft/03/","text":"fbtft\u4f7f\u7528\u7684\u662fframebuffer\u6846\u67b6\uff0c\u8fd9\u79cd\u6846\u67b6\u5c06\u663e\u793a\u8bbe\u5907\u62bd\u8c61\u4e3a\u5e27\u7f13\u51b2\u533a\uff0c\u5bf9framebuffer\u8bbe\u5907\uff08/dev/fbx(0\u30011\u30012..)\uff09\u8fdb\u884c\u76f8\u5173\u64cd\u4f5c\u53ef\u4ee5\u53cd\u5e94\u5230LCD\u4e0a\u3002 \u73b0\u5728\u5c1d\u8bd5\u4e0b\u5728\u7528\u6237\u7a7a\u95f4\u7528C\u6765\u64cd\u4f5cLCD\u8bbe\u5907\u3002 \u83b7\u53d6\u53c2\u6570 \uf0c1 \u8981\u5bf9framebuffer\u8fdb\u884c\u64cd\u4f5c\uff0c\u9996\u5148\u8981\u77e5\u9053\u6240\u64cd\u4f5c\u8bbe\u5907\u7684\u76f8\u5173\u53c2\u6570\uff0cLinux\u5728\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u4e86\u4e24\u4e2a\u8ddfframebuffer\u53c2\u6570\u76f8\u5173\u7684\u7ed3\u6784\u4f53\uff08\u5728\u6587\u4ef6fb.h\u4e2d\uff09: fb_fix_screeninfo struct fb_fix_screeninfo { char id[16]; /* identification string eg \"TT Builtin\" */ unsigned long smem_start; /* Start of frame buffer mem */ /* (physical address) */ __u32 smem_len; /* Length of frame buffer mem */ __u32 type; /* see FB_TYPE_* */ __u32 type_aux; /* Interleave for interleaved Planes */ __u32 visual; /* see FB_VISUAL_* */ __u16 xpanstep; /* zero if no hardware panning */ __u16 ypanstep; /* zero if no hardware panning */ __u16 ywrapstep; /* zero if no hardware ywrap */ __u32 line_length; /* length of a line in bytes */ unsigned long mmio_start; /* Start of Memory Mapped I/O */ /* (physical address) */ __u32 mmio_len; /* Length of Memory Mapped I/O */ __u32 accel; /* Indicate to driver which */ /* specific chip/card we have */ __u16 capabilities; /* see FB_CAP_* */ __u16 reserved[2]; /* Reserved for future compatibility */ }; fb_var_screeninfo struct fb_var_screeninfo { __u32 xres; /* visible resolution */ __u32 yres; __u32 xres_virtual; /* virtual resolution */ __u32 yres_virtual; __u32 xoffset; /* offset from virtual to visible */ __u32 yoffset; /* resolution */ __u32 bits_per_pixel; /* guess what */ __u32 grayscale; /* 0 = color, 1 = grayscale, */ /* >1 = FOURCC */ struct fb_bitfield red; /* bitfield in fb mem if true color, */ struct fb_bitfield green; /* else only length is significant */ struct fb_bitfield blue; struct fb_bitfield transp; /* transparency */ __u32 nonstd; /* != 0 Non standard pixel format */ __u32 activate; /* see FB_ACTIVATE_* */ __u32 height; /* height of picture in mm */ __u32 width; /* width of picture in mm */ __u32 accel_flags; /* (OBSOLETE) see fb_info.flags */ /* Timing: All values in pixclocks, except pixclock (of course) */ __u32 pixclock; /* pixel clock in ps (pico seconds) */ __u32 left_margin; /* time from sync to picture */ __u32 right_margin; /* time from picture to sync */ __u32 upper_margin; /* time from sync to picture */ __u32 lower_margin; __u32 hsync_len; /* length of horizontal sync */ __u32 vsync_len; /* length of vertical sync */ __u32 sync; /* see FB_SYNC_* */ __u32 vmode; /* see FB_VMODE_* */ __u32 rotate; /* angle we rotate counter clockwise */ __u32 colorspace; /* colorspace for FOURCC-based modes */ __u32 reserved[4]; /* Reserved for future compatibility */ }; \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u901a\u8fc7ioctl\u83b7\u5f97\uff0c\u9996\u5148\u5b9a\u4e493\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u6253\u5f00\u7684fb\u8bbe\u5907\u7684\u53e5\u67c4\uff0c\u5269\u4e0b2\u4e2a\u5206\u522b\u662ffb_var_screeninfo\u3001fb_fix_screeninfo\uff1a int fbfd = 0; struct fb_var_screeninfo vinfo; struct fb_fix_screeninfo finfo; \u6253\u5f00fb\u8bbe\u5907\uff1a fbfd = open(\"/dev/fb0\", O_RDWR); if (!fbfd) { printf(\"Error: cannot open framebuffer device.\\n\"); exit(1); } \u7136\u540e\u5206\u522b\u83b7\u53d6\u4e24\u4e2a\u7ed3\u6784\u4f53\uff0c\u5e76\u5728main\u51fd\u6570\u4e2d\u8c03\u7528\uff1a if (ioctl(fbfd, FBIOGET_FSCREENINFO, &finfo)) { printf(\"Error reading fixed information.\\n\"); exit(2); } if (ioctl(fbfd, FBIOGET_VSCREENINFO, &vinfo)) { printf(\"Error: reading variable information.\\n\"); exit(3); } \u521b\u5efa\u4e24\u4e2a\u51fd\u6570\u5206\u522b\u8f93\u51fa\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4f53\u5143\u7d20\uff1a void show_fb_fix_info(struct fb_fix_screeninfo info) { printf(\"fb's fix msg:\\n\"); printf(\"\\tid is:%s\\n\",info.id); printf(\"\\tsmem_start is:%d\\n\",info.smem_start); printf(\"\\tsmem_len is:%d\\n\",info.smem_len); printf(\"\\ttype_aux is:%d\\n\",info.type_aux); printf(\"\\tvisual is:%d\\n\",info.visual); printf(\"\\txpanstep is:%d\\n\",info.xpanstep); printf(\"\\typanstep is:%d\\n\",info.ypanstep); printf(\"\\tywrapstep is:%d\\n\",info.ywrapstep); printf(\"\\tline_length is:%d\\n\",info.line_length); printf(\"\\tmmio_start is:%d\\n\",info.mmio_start); } void show_fb_var_info(struct fb_var_screeninfo info) { printf(\"fb's var msg:\\n\"); printf(\"\\txres is:%d\\n\",info.xres); printf(\"\\tyres is:%d\\n\",info.yres); printf(\"\\txres_virtual is:%d\\n\",info.xres_virtual); printf(\"\\tyres_virtual is:%d\\n\",info.yres_virtual); printf(\"\\txoffset is:%d\\n\",info.xoffset); printf(\"\\tyoffset is:%d\\n\",info.yoffset); printf(\"\\tbits_per_pixel is:%d\\n\",info.bits_per_pixel); printf(\"\\tgrayscale is:%d\\n\",info.grayscale); printf(\"\\tnonstd is:%d\\n\",info.nonstd); printf(\"\\tactivate is:%d\\n\",info.activate); printf(\"\\theight is:%d\\n\",info.height); printf(\"\\twidth is:%d\\n\",info.width); printf(\"\\taccel_flags is:%d\\n\",info.accel_flags); printf(\"\\tpixclock is:%d\\n\",info.pixclock); printf(\"\\tleft_margin is:%d\\n\",info.left_margin); printf(\"\\tright_margin is:%d\\n\",info.right_margin); printf(\"\\tupper_margin is:%d\\n\",info.upper_margin); printf(\"\\tlower_margin is:%d\\n\",info.lower_margin); printf(\"\\thsync_len is:%d\\n\",info.hsync_len); printf(\"\\tvsync_len is:%d\\n\",info.vsync_len); printf(\"\\tsync is:%d\\n\",info.sync); printf(\"\\tvmode is:%d\\n\",info.vmode); printf(\"\\trotate is:%d\\n\",info.rotate); printf(\"\\tcolorspace is:%d\\n\",info.colorspace); } \u7f16\u8bd1\u3001\u62f7\u8d1d\u5230\u76ee\u6807\u677f\u4e0a\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \u4ece\u4e0a\u9762\u8fd0\u884c\u7ed3\u679c\u770b\uff0c\u6210\u529f\u7684\u83b7\u53d6\u4e86\u5c4f\u7684\u4e00\u7cfb\u5217\u53c2\u6570\u3002 \u8be6\u7ec6\u4ee3\u7801 \uff1a framebuffer/show_fb_msg.c \u586b\u5145\u989c\u8272 \uf0c1 \u200b \u73b0\u5728\u8bd5\u4e0b\u7ed9\u6574\u4e2a\u5c4f\u586b\u5145\u989c\u8272\uff0c\u8981\u586b\u5145\u5c4f\u7684\u8bdd\uff0c\u9700\u8981\u51e0\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662fframebuffer\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u4e00\u4e2a\u662f\u5c4f\u7684\u50cf\u7d20\u7684\u4e2a\u6570\uff0c\u8fd8\u6709\u5c31\u662f\u989c\u8272\u6df1\u5ea6\u3002 \u200b \u8981\u5bf9framebuffer\u8fdb\u884c\u64cd\u4f5c\u9996\u5148\u9700\u8981\u505a\u7684\u662f\u901a\u8fc7mmap\u8fdb\u884c\u5730\u5740\u6620\u5c04\uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230framebuffer\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\uff0cframebuffer\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\u53ef\u4ee5\u4ecefb_fix_screeninfo\u83b7\u5f97\uff0c\u5982\u4e0b\uff1a static char *fbp = 0; fbp = (char *)mmap(0, finfo.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fbfd, 0); if ((int)fbp == -1) { printf(\"Error: failed to map framebuffer device to memory.\\n\"); exit(4); } \u200b \u8fd9\u91cc\u7533\u8bf7\u4e00\u6bb5finfo.smem_len\u5927\u5c0f\u7684\u8fde\u7eed\u5185\u5b58\uff0c\u5bf9\u8fd9\u6bb5\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\u5c31\u4f1a\u53cd\u5e94\u5230\u5c4f\u4e0a\u4e86\u3002 \u200b \u5bf9\u6574\u4e2a\u5c4f\u8fdb\u884c\u586b\u5145\u5c31\u662f\u64cd\u4f5c\u5c4f\u4e0a\u7684\u6240\u6709\u50cf\u7d20\uff08\u4e5f\u53ef\u4ee5\u8bf4\u904d\u5386\u6240\u6709\u50cf\u7d20\uff09\uff0c\u8fd9\u91cc\u5c31\u9700\u8981\u77e5\u9053\u5c4f\u5e55\u7684\u50cf\u7d20\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u4ece\u4e4b\u524d\u83b7\u53d6\u5230\u7684fb_var_screeninfo\u4e2d\u7684\u53c2\u6570\u4e2d\u7684xres\uff0cyres\u3002\u4ecefb.h\u4e2d\u7684\u6ce8\u91ca\u7ffb\u8bd1\u8fc7\u6765\uff0cxres\uff0cyres\u662f\u53ef\u89c1\u5206\u8fa8\u7387\uff0c\u6211\u7406\u89e3\u4e3a\u53ef\u89c1\u533a\u57df\uff0c\u5e94\u8be5\u5c31\u662f\u5bf9\u5e94\u5c4f\u5e55\u663e\u793a\u533a\u57df\u7684\u5927\u5c0f\u4e86\u3002 int screensize = 0; screensize = xres * yres; \u200b \u8fd8\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u53c2\u6570\u989c\u8272\u6df1\u5ea6\uff08bpp\uff1abits per pixel\uff09\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u4e00\u4e2a\u50cf\u7d20\u989c\u8272\u6240\u9700\u7684\u4f4d\u6570\uff08bit\uff09\uff0c\u4e00\u822c\u6765\u8bf4\u6709\u8fd9\u4e48\u51e0\u79cd\uff1a1\u4f4d\uff0c8\u4f4d\uff0c16\u4f4d\uff0c24\u4f4d\uff0c32\u4f4d\u3002\uff0c\u6bd4\u59821\u4f4d\u7684\u5c4f\uff0c\u4e5f\u5c31\u662f\u5355\u8272\u5c4f\uff0c\u75281bit\u6765\u8868\u793a\u989c\u8272\uff0c\u5982\u679c\u662f\u767d\u8272\u5355\u8272\u5c4f\u7684\u8bdd\uff0c0\u8868\u793a\u9ed1\u8272\uff0c1\u8868\u793a\u767d\u8272\u300224bit\u5c4f\uff0c\u5c31\u662f\u752824bit\uff083\u5b57\u8282\uff09\u8868\u793a\u989c\u8272\uff0c\u4e5f\u5c31\u662fRGB888\uff0cR\u3001G\u3001B\u5206\u522b\u53608bit\u3002 \u200b \u4ece\u4e0a\u9762\u83b7\u53d6\u5230\u7684\u53c2\u6570\u77e5\u9053\uff0c\u8be5\u5c4f\u662f16bit\u7684\uff0c\u4e5f\u5c31\u662fRGB565\uff0c\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u3002\u5e94\u4e3a\u4e4b\u524d\u7528mmap\u7533\u8bf7\u7684\u5185\u5b58\u662fchar\u6307\u9488\uff0c\u7528\u8be5\u6307\u9488\u6765\u64cd\u4f5c\u50cf\u7d20\u7684\u8bdd\u4e0d\u65b9\u4fbf\uff0c\u7d22\u6027\u5c31\u628achar\u578b\u8f6c\u6210short\u578b\uff0c\u5982\u4e0b\uff1a short *fb_s; fb_s = (short *)fbp; \u5b9a\u4e494\u4e2a\u5b8f\uff0c\u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u3001\u9ed1\u8272\uff0c #define RED 0xf800 #define GREEN 0x07e0 #define BLUE 0x001f #define BLACK 0x0000 \u521b\u5efa\u4e00\u4e2a\u5199framebuffer\u5185\u5b58\u7684\u51fd\u6570\uff0c\u5982\u4e0b\uff1a void fill_screen(short *fb_men,short color,int pix_size) { for(int i=0;i<pix_size;i++) { *fb_men = color; fb_men ++; } } \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6240\u8981\u64cd\u4f5c\u7684framebuffer\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6240\u8981\u586b\u5145\u7684\u989c\u8272\uff0c\u7b2c\u4e09\u4e2a\u662f\u5c4f\u5e55\u7684\u5c3a\u5bf8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5bf9\u5c4f\u5e55\u8fdb\u884c\u586b\u5145\u4e86\uff0c\u5982\u4e0b\uff1a printf(\"Fill red\\n\"); fill_screen(fb_s,RED,screensize/2); sleep(1); printf(\"Fill green\\n\"); // fb_s = (short *)fbp; fill_screen(fb_s,GREEN,screensize/2); sleep(1); printf(\"Fill blue\\n\"); // fb_s = (short *)fbp; fill_screen(fb_s,BLUE,screensize/2); sleep(1); fill_screen(fb_s,BLACK,screensize/2); \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5148\u586b\u5145\u7ea2\u8272\uff0c\u7b49\u5f851\u79d2\uff0c\u7136\u540e\u662f\u7eff\u8272\u3001\u84dd\u8272\uff0c\u6700\u540e\u586b\u5145\u9ed1\u8272\uff08\u6e05\u5c4f\uff09\u3002\u6548\u679c\u5982\u4e0b\uff1a \u8be6\u7ec6\u4ee3\u7801 \uff1a framebuffer/fb_fill_color.c \u663e\u793a\u56fe\u7247 \uf0c1 \u73b0\u6709\u7684\u56fe\u7247\u683c\u5f0f\u975e\u5e38\u591a\uff0cJPEG\u3001TIFF\u3001PNG\u3001BMP\uff0cSVG\u7b49\u7b49\uff0c\u8fd9\u4e9b\u53c8\u5206\u6709\u538b\u7f29\u3001\u65e0\u538b\u7f29\u3002\u8fd9\u91cc\u662f\u4e3a\u4e86\u5b66\u4e60\u5982\u4f55\u64cd\u4f5cframebuffer\uff0c\u5c31\u9009\u62e9\u4e00\u79cd\u65e0\u538b\u7f29\u683c\u5f0f\u7684\u683c\u5f0f\u7684\u56fe\u7247\u6765\u64cd\u4f5c\u3002\u53ef\u4ee5\u76f4\u63a5\u4ee5\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\u8bfb\u53d6\u56fe\u7247\u6570\u636e\uff0c\u7136\u540e\u663e\u793a\u5230\u5c4f\u4e0a\u3002\u6bd4\u8f83\u5e38\u7528\u7684\u65e0\u538b\u7f29\u7684\u56fe\u7247\u662fBMP\uff0c\u8fd9\u91cc\u5c31\u9009\u62e9BMP\u683c\u5f0f\u7684\u56fe\u7247\u3002 \u200b BMP\u683c\u5f0f\u56fe\u7247\u6570\u636e\u6709\u4ee5\u4e0b4\u90e8\u5206\u7ec4\u6210\uff1a \u4f4d\u56fe\u5934\u6587\u4ef6\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542bBMP\u56fe\u50cf\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u663e\u793a\u5185\u5bb9\u7b49\u4fe1\u606f\uff1b \u4f4d\u56fe\u4fe1\u606f\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u6709BMP\u56fe\u50cf\u7684\u5bbd\u3001\u9ad8\u3001\u538b\u7f29\u65b9\u6cd5\uff0c\u4ee5\u53ca\u5b9a\u4e49\u989c\u8272\u7b49\u4fe1\u606f\uff1b \u8c03\u8272\u677f\uff0c\u8fd9\u4e2a\u90e8\u5206\u662f\u53ef\u9009\u7684\uff0c\u6709\u4e9b\u4f4d\u56fe\u9700\u8981\u8c03\u8272\u677f\uff0c\u6709\u4e9b\u4f4d\u56fe\uff0c\u6bd4\u5982\u771f\u5f69\u8272\u56fe\uff0824\u4f4d\u7684BMP\uff09\u5c31\u4e0d\u9700\u8981\u8c03\u8272\u677f\uff1b \u4f4d\u56fe\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u6839\u636eBMP\u4f4d\u56fe\u4f7f\u7528\u7684\u4f4d\u6570\u4e0d\u540c\u800c\u4e0d\u540c\uff0c\u572824\u4f4d\u56fe\u4e2d\u76f4\u63a5\u4f7f\u7528RGB\uff0c\u800c\u5176\u4ed6\u7684\u5c0f\u4e8e24\u4f4d\u7684\u4f7f\u7528\u8c03\u8272\u677f\u4e2d\u989c\u8272\u7d22\u5f15\u503c\u3002 \u7531\u4ee5\u4e0a\u4fe1\u606f\u53ef\u4ee5\u77e5\u905324\u4f4d\u7684bmp\u56fe\u7247\uff0c\u6570\u636e\u90e8\u5206\u5c31\u662f\u56fe\u7247\u50cf\u7d20\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u8bf4\u8bfb\u53d624\u4f4dbmp\u56fe\u7247\u7684\u6570\u636e\u90e8\u5206\u4e0d\u7528\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u7528\uff0c\u6240\u4ee5\u8fd9\u91cc\u9009\u62e9\u4f7f\u752824bit\u7684BMP\u56fe\u7247\uff0c\u4ee5\u4e0b\u662f\u6211\u7528\u6765\u6d4b\u8bd5\u768424bit\u56fe\u7247\u4e2d\u7684\u4e00\u5f20\u56fe\u7247\u7684\u4fe1\u606f\uff1a BMP\u6587\u4ef6\u7684\u4f4d\u56fe\u5934\u8ddf\u4f4d\u56fe\u4fe1\u606f\u90e8\u5206\u5360BMP\u56fe\u7247\u6570\u636e\u7684\u524d54\u5b57\u8282\uff0c24\u4f4dBMP\u56fe\u7247\u7684\u56fe\u7247\u6570\u636e\u90e8\u5206\u5c31\u662f\u5269\u4e0b\u7684\u6240\u6709\u6570\u636e\u4e86\uff08\u7b2c55\u5b57\u8282\u5f00\u59cb\uff09\u3002\u8981\u5bf9BMP\u56fe\u7247\u7684\u4f4d\u56fe\u6570\u636e\u8fdb\u884c\u8bfb\uff0c\u8fd8\u9700\u8981\u51e0\u4e2a\u5173\u952e\u53c2\u6570\uff0c\u6240\u8bfb\u7684\u56fe\u7247\u7684\u5bbd\u3001\u9ad8\u3002\u8fd8\u6709\u989c\u8272\u6df1\u5ea6\uff08bpc\uff09,\u56e0\u4e3a\u9009\u7528\u4e8624\u4f4d\u7684\u56fe\u7247\uff0c\u989c\u8272\u6df1\u5ea6\u7b97\u662f\u5df2\u8fd1\u77e5\u9053\u4e86\u3002 \u83b7\u53d6BMP\u56fe\u7247\u4fe1\u606f \uf0c1 \u9996\u5148\u83b7\u53d6BMP\u56fe\u7247\u7684\u4fe1\u606f\uff0c\u5b9a\u4e49\u4e2a\u7ed3\u6784\u4f53\uff1a typedef struct { uint16_t bfType; uint32_t bfSize; uint32_t biWidth; uint32_t biHeight; uint16_t biBitCount; }BMP_HEADER; \u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u7684\u5143\u7d20\u5206\u522b\u6709\u56fe\u7247\u7c7b\u578b\uff0c\u56fe\u7247\u6570\u636e\u5927\u5c0f\uff0c\u56fe\u7247\u7684\u5c3a\u5bf8\u8ddf\u989c\u8272\u6df1\u5ea6\u3002 \u521b\u5efa\u4e2a\u83b7\u53d6\u8be5\u7ed3\u6784\u56fe\u7684\u51fd\u6570\uff1a BMP_HEADER TFTBmpGetHeadInfo(uint8_t *buf) { BMP_HEADER bmpHead; bmpHead.bfType = (buf[0] << 8) + buf[1]; bmpHead.bfSize = (buf[5]<<24) + (buf[4]<<16) + (buf[3]<<8) + buf[2]; bmpHead.biWidth = (buf[21]<<24) + (buf[20]<<16) + (buf[19]<<8) + buf[18]; bmpHead.biHeight = (buf[25]<<24) + (buf[24]<<16) + (buf[23]<<8) + buf[22]; bmpHead.biBitCount = (buf[29] << 8) + buf[28]; return bmpHead; } \u6253\u5f00\u56fe\u7247\u5e76\u8bfb\u53d6\u524d54\u5b57\u8282\uff0c\u4f20\u7ed9\u51fd\u6570TFTBmpGetHeadInfo\uff0c\u7136\u540e\u5224\u65ad\u56fe\u7247\u683c\u5f0f\u662f\u5426\u4e3aBMP\uff0c\u989c\u8272\u6df1\u5ea6\u662f\u5426\u4e3a24bit\uff0c\u4e0d\u662f\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4e0d\u518d\u7ee7\u7eed\u8fd0\u884c\uff1a bmp_fd = open(argv[1], O_RDWR); if(bmp_fd <0) { printf(\"open file faile\\n\"); } if(read(bmp_fd,buffer,54) <0) { printf(\"read file \\\"%s\\\" faile\\n\",argv[1]); return -1; } bmp_header = TFTBmpGetHeadInfo(buffer); printf(\"%s's msg:\\n\",argv[1]); printf(\"\\ttype:%2x\\n\",bmp_header.bfType); printf(\"\\tsize:%d\\n\",bmp_header.bfSize); printf(\"\\tWidth:%d\\n\",bmp_header.biWidth); printf(\"\\tHeight:%d\\n\",bmp_header.biHeight); printf(\"\\tBitCount:%d\\n\",bmp_header.biBitCount); if(bmp_header.bfType != 0x424d) { printf(\"The picture is not bmp file\\n\"); return -1; } if(bmp_header.biBitCount != 24) { printf(\"Just support 24bit bmp file\\n\"); return -1; } \u628a\u56fe\u7247\u663e\u793a\u5230\u5c4f\u4e0a \uf0c1 \u200b \u6211\u8fd9\u91cc\u5b9e\u73b0\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u8bfb\u53d6BMP\u56fe\u7247\u7684\u4e00\u884c\u5c31\u5199\u5230Framebuffer\u5bf9\u5e94\u7684\u7f13\u5b58\u4e2d\uff0c\u867d\u7136\u8981\u6c42read\u8bfb\u53d6\u6307\u5b9a\u4e2a\u5b57\u8282\uff0c\u53ef\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u80fd\u591f\u8bfb\u53d6\u6240\u8981\u6c42\u7684\u5b57\u8282\u6570\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u52a0\u4e2a\u5224\u65ad\uff0c\u5224\u65ad\u6bcf\u6b21\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u662f\u5426\u4e3a\u8fbe\u5230\u8981\u6c42\uff0c\u6ca1\u8fbe\u5230\u8981\u6c42\u5c31\u7ee7\u7eed\u8bfb\uff0c\u77e5\u9053\u8fbe\u5230\u8981\u6c42\u4e3a\u6b62\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a int perline_size = bmp_header.biWidth * bmp_header.biBitCount /8; char * readed_data = (char *)malloc(perline_size); int i=0; int line_count=0; int read_size = perline_size; int read_count=0; int read_per_line=0; int buf_offset=0; while((ret = read(bmp_fd,readed_data+buf_offset,read_size)) !=0) { if(ret == -1) { if(errno == EINTR) continue; perror(\"read\"); break; }else if(ret !=perline_size ) { read_per_line += ret; read_size = perline_size - read_per_line; buf_offset = read_per_line; }else read_per_line = ret; if(read_per_line == perline_size) { read_size = perline_size; buf_offset =0; read_per_line = 0; if(bits_per_pixel ==16) { short pixl = 0; if(screan_width > bmp_header.biWidth) { for(i=0;i<bmp_header.biWidth;i++) { short blue = (readed_data[i*3]>>3) & 0x001f; short green = (readed_data[i*3+1]>>2) & 0x003f; short red = (readed_data[i*3+2]>>3) & 0x001f; pixl = (red << 11 ) + (green << 5) + blue; *fb_s = pixl; fb_s ++; } fb_s += screan_width -bmp_header.biWidth ; }else if(screan_width <= bmp_header.biWidth) { for(i=0;i<screan_width;i++) { short blue = (readed_data[i*3]>>3) & 0x001f; short green = (readed_data[i*3+1]>>2) & 0x003f; short red = (readed_data[i*3+2]>>3) & 0x001f; pixl = (red << 11 ) + (green << 5) + blue; *fb_s = pixl; fb_s ++; } } } } line_count++; if(line_count >= screan_height) break; } \u8fd9\u91cc\u8fd8\u6d89\u53ca\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e\u4f7f\u7528\u7684\u56fe\u7247\u662f24bit\u7684\uff0c\u663e\u793a\u5c4f\u4f7f\u7528\u7684\u5374\u662f16\u4f4d\u7684\uff0c\u90a3\u5c31\u9700\u8981\u628a24bit\u8f6c\u621016bit\u4e86\uff0c\u5728\u505a\u4e4b\u524d\u5c31\u6709\u60f3\u8fc7\uff0c\u8f6c\u6362\u7684\u65f6\u5019\u662f\u53d6\u9ad8\u4f4d\u8fd8\u662f\u4f4e\u4f4d\u5462\uff1f\u4e00\u5f00\u59cb\uff0c\u6211\u662f\u53d6\u4f4e\u4f4d\u7684\uff0c\u4ee3\u7801\u4e3a\uff1a short blue = (readed_data[i*3]) & 0x001f; short green = (readed_data[i*3+1]) & 0x003f; short red = (readed_data[i*3+2]) & 0x001f; pixl = (red << 11 ) + (green << 5) + blue; *fb_s = pixl; fb_s ++; \u663e\u793a\u4e00\u5f20\u6709\u7ea2\u3001\u7eff\u3001\u84dd\u8272\u5757\u7684\u56fe\u7247\uff1a \u7ea2\u8272\u663e\u793a\u6709\u95ee\u9898\uff0c\u6b63\u5e38\u7684\u5982\u4e0b\uff1a \u8fd8\u6709\u663e\u793a\u4e00\u4e9b\u5176\u4ed6\u56fe\u7247\u7684\uff1a \u663e\u793a\u53ef\u7231\u7684\u7962\u8c46\u5b50\uff1a \u6700\u540e\u9644\u4e0a\u4e00\u5f20\u663e\u793a\u56fe\u7247\u65f6\u8f93\u51fa\u7684\u4fe1\u606f\uff1a \u8be6\u7ec6\u4ee3\u7801\uff1a show_bmp.c \u53c2\u8003\uff1a PNG\u3001JPEG\u3001BMP\u7b49\u51e0\u79cd\u56fe\u7247\u683c\u5f0f\u8be6\u89e3\uff08\u4e09\uff09\u2014\u2014 BMP","title":"\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u4f7f\u7528framebuffer"},{"location":"kernel/fbtft/03/#_1","text":"\u8981\u5bf9framebuffer\u8fdb\u884c\u64cd\u4f5c\uff0c\u9996\u5148\u8981\u77e5\u9053\u6240\u64cd\u4f5c\u8bbe\u5907\u7684\u76f8\u5173\u53c2\u6570\uff0cLinux\u5728\u7528\u6237\u7a7a\u95f4\u63d0\u4f9b\u4e86\u4e24\u4e2a\u8ddfframebuffer\u53c2\u6570\u76f8\u5173\u7684\u7ed3\u6784\u4f53\uff08\u5728\u6587\u4ef6fb.h\u4e2d\uff09: fb_fix_screeninfo struct fb_fix_screeninfo { char id[16]; /* identification string eg \"TT Builtin\" */ unsigned long smem_start; /* Start of frame buffer mem */ /* (physical address) */ __u32 smem_len; /* Length of frame buffer mem */ __u32 type; /* see FB_TYPE_* */ __u32 type_aux; /* Interleave for interleaved Planes */ __u32 visual; /* see FB_VISUAL_* */ __u16 xpanstep; /* zero if no hardware panning */ __u16 ypanstep; /* zero if no hardware panning */ __u16 ywrapstep; /* zero if no hardware ywrap */ __u32 line_length; /* length of a line in bytes */ unsigned long mmio_start; /* Start of Memory Mapped I/O */ /* (physical address) */ __u32 mmio_len; /* Length of Memory Mapped I/O */ __u32 accel; /* Indicate to driver which */ /* specific chip/card we have */ __u16 capabilities; /* see FB_CAP_* */ __u16 reserved[2]; /* Reserved for future compatibility */ }; fb_var_screeninfo struct fb_var_screeninfo { __u32 xres; /* visible resolution */ __u32 yres; __u32 xres_virtual; /* virtual resolution */ __u32 yres_virtual; __u32 xoffset; /* offset from virtual to visible */ __u32 yoffset; /* resolution */ __u32 bits_per_pixel; /* guess what */ __u32 grayscale; /* 0 = color, 1 = grayscale, */ /* >1 = FOURCC */ struct fb_bitfield red; /* bitfield in fb mem if true color, */ struct fb_bitfield green; /* else only length is significant */ struct fb_bitfield blue; struct fb_bitfield transp; /* transparency */ __u32 nonstd; /* != 0 Non standard pixel format */ __u32 activate; /* see FB_ACTIVATE_* */ __u32 height; /* height of picture in mm */ __u32 width; /* width of picture in mm */ __u32 accel_flags; /* (OBSOLETE) see fb_info.flags */ /* Timing: All values in pixclocks, except pixclock (of course) */ __u32 pixclock; /* pixel clock in ps (pico seconds) */ __u32 left_margin; /* time from sync to picture */ __u32 right_margin; /* time from picture to sync */ __u32 upper_margin; /* time from sync to picture */ __u32 lower_margin; __u32 hsync_len; /* length of horizontal sync */ __u32 vsync_len; /* length of vertical sync */ __u32 sync; /* see FB_SYNC_* */ __u32 vmode; /* see FB_VMODE_* */ __u32 rotate; /* angle we rotate counter clockwise */ __u32 colorspace; /* colorspace for FOURCC-based modes */ __u32 reserved[4]; /* Reserved for future compatibility */ }; \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u901a\u8fc7ioctl\u83b7\u5f97\uff0c\u9996\u5148\u5b9a\u4e493\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u6253\u5f00\u7684fb\u8bbe\u5907\u7684\u53e5\u67c4\uff0c\u5269\u4e0b2\u4e2a\u5206\u522b\u662ffb_var_screeninfo\u3001fb_fix_screeninfo\uff1a int fbfd = 0; struct fb_var_screeninfo vinfo; struct fb_fix_screeninfo finfo; \u6253\u5f00fb\u8bbe\u5907\uff1a fbfd = open(\"/dev/fb0\", O_RDWR); if (!fbfd) { printf(\"Error: cannot open framebuffer device.\\n\"); exit(1); } \u7136\u540e\u5206\u522b\u83b7\u53d6\u4e24\u4e2a\u7ed3\u6784\u4f53\uff0c\u5e76\u5728main\u51fd\u6570\u4e2d\u8c03\u7528\uff1a if (ioctl(fbfd, FBIOGET_FSCREENINFO, &finfo)) { printf(\"Error reading fixed information.\\n\"); exit(2); } if (ioctl(fbfd, FBIOGET_VSCREENINFO, &vinfo)) { printf(\"Error: reading variable information.\\n\"); exit(3); } \u521b\u5efa\u4e24\u4e2a\u51fd\u6570\u5206\u522b\u8f93\u51fa\u8fd9\u4e24\u4e2a\u7ed3\u6784\u4f53\u5143\u7d20\uff1a void show_fb_fix_info(struct fb_fix_screeninfo info) { printf(\"fb's fix msg:\\n\"); printf(\"\\tid is:%s\\n\",info.id); printf(\"\\tsmem_start is:%d\\n\",info.smem_start); printf(\"\\tsmem_len is:%d\\n\",info.smem_len); printf(\"\\ttype_aux is:%d\\n\",info.type_aux); printf(\"\\tvisual is:%d\\n\",info.visual); printf(\"\\txpanstep is:%d\\n\",info.xpanstep); printf(\"\\typanstep is:%d\\n\",info.ypanstep); printf(\"\\tywrapstep is:%d\\n\",info.ywrapstep); printf(\"\\tline_length is:%d\\n\",info.line_length); printf(\"\\tmmio_start is:%d\\n\",info.mmio_start); } void show_fb_var_info(struct fb_var_screeninfo info) { printf(\"fb's var msg:\\n\"); printf(\"\\txres is:%d\\n\",info.xres); printf(\"\\tyres is:%d\\n\",info.yres); printf(\"\\txres_virtual is:%d\\n\",info.xres_virtual); printf(\"\\tyres_virtual is:%d\\n\",info.yres_virtual); printf(\"\\txoffset is:%d\\n\",info.xoffset); printf(\"\\tyoffset is:%d\\n\",info.yoffset); printf(\"\\tbits_per_pixel is:%d\\n\",info.bits_per_pixel); printf(\"\\tgrayscale is:%d\\n\",info.grayscale); printf(\"\\tnonstd is:%d\\n\",info.nonstd); printf(\"\\tactivate is:%d\\n\",info.activate); printf(\"\\theight is:%d\\n\",info.height); printf(\"\\twidth is:%d\\n\",info.width); printf(\"\\taccel_flags is:%d\\n\",info.accel_flags); printf(\"\\tpixclock is:%d\\n\",info.pixclock); printf(\"\\tleft_margin is:%d\\n\",info.left_margin); printf(\"\\tright_margin is:%d\\n\",info.right_margin); printf(\"\\tupper_margin is:%d\\n\",info.upper_margin); printf(\"\\tlower_margin is:%d\\n\",info.lower_margin); printf(\"\\thsync_len is:%d\\n\",info.hsync_len); printf(\"\\tvsync_len is:%d\\n\",info.vsync_len); printf(\"\\tsync is:%d\\n\",info.sync); printf(\"\\tvmode is:%d\\n\",info.vmode); printf(\"\\trotate is:%d\\n\",info.rotate); printf(\"\\tcolorspace is:%d\\n\",info.colorspace); } \u7f16\u8bd1\u3001\u62f7\u8d1d\u5230\u76ee\u6807\u677f\u4e0a\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \u4ece\u4e0a\u9762\u8fd0\u884c\u7ed3\u679c\u770b\uff0c\u6210\u529f\u7684\u83b7\u53d6\u4e86\u5c4f\u7684\u4e00\u7cfb\u5217\u53c2\u6570\u3002 \u8be6\u7ec6\u4ee3\u7801 \uff1a framebuffer/show_fb_msg.c","title":"\u83b7\u53d6\u53c2\u6570"},{"location":"kernel/fbtft/03/#_2","text":"\u200b \u73b0\u5728\u8bd5\u4e0b\u7ed9\u6574\u4e2a\u5c4f\u586b\u5145\u989c\u8272\uff0c\u8981\u586b\u5145\u5c4f\u7684\u8bdd\uff0c\u9700\u8981\u51e0\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662fframebuffer\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u4e00\u4e2a\u662f\u5c4f\u7684\u50cf\u7d20\u7684\u4e2a\u6570\uff0c\u8fd8\u6709\u5c31\u662f\u989c\u8272\u6df1\u5ea6\u3002 \u200b \u8981\u5bf9framebuffer\u8fdb\u884c\u64cd\u4f5c\u9996\u5148\u9700\u8981\u505a\u7684\u662f\u901a\u8fc7mmap\u8fdb\u884c\u5730\u5740\u6620\u5c04\uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230framebuffer\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\uff0cframebuffer\u6240\u9700\u5185\u5b58\u7684\u5927\u5c0f\u53ef\u4ee5\u4ecefb_fix_screeninfo\u83b7\u5f97\uff0c\u5982\u4e0b\uff1a static char *fbp = 0; fbp = (char *)mmap(0, finfo.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fbfd, 0); if ((int)fbp == -1) { printf(\"Error: failed to map framebuffer device to memory.\\n\"); exit(4); } \u200b \u8fd9\u91cc\u7533\u8bf7\u4e00\u6bb5finfo.smem_len\u5927\u5c0f\u7684\u8fde\u7eed\u5185\u5b58\uff0c\u5bf9\u8fd9\u6bb5\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\u5c31\u4f1a\u53cd\u5e94\u5230\u5c4f\u4e0a\u4e86\u3002 \u200b \u5bf9\u6574\u4e2a\u5c4f\u8fdb\u884c\u586b\u5145\u5c31\u662f\u64cd\u4f5c\u5c4f\u4e0a\u7684\u6240\u6709\u50cf\u7d20\uff08\u4e5f\u53ef\u4ee5\u8bf4\u904d\u5386\u6240\u6709\u50cf\u7d20\uff09\uff0c\u8fd9\u91cc\u5c31\u9700\u8981\u77e5\u9053\u5c4f\u5e55\u7684\u50cf\u7d20\u7684\u4e2a\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u53ef\u4ee5\u4ece\u4e4b\u524d\u83b7\u53d6\u5230\u7684fb_var_screeninfo\u4e2d\u7684\u53c2\u6570\u4e2d\u7684xres\uff0cyres\u3002\u4ecefb.h\u4e2d\u7684\u6ce8\u91ca\u7ffb\u8bd1\u8fc7\u6765\uff0cxres\uff0cyres\u662f\u53ef\u89c1\u5206\u8fa8\u7387\uff0c\u6211\u7406\u89e3\u4e3a\u53ef\u89c1\u533a\u57df\uff0c\u5e94\u8be5\u5c31\u662f\u5bf9\u5e94\u5c4f\u5e55\u663e\u793a\u533a\u57df\u7684\u5927\u5c0f\u4e86\u3002 int screensize = 0; screensize = xres * yres; \u200b \u8fd8\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u53c2\u6570\u989c\u8272\u6df1\u5ea6\uff08bpp\uff1abits per pixel\uff09\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u4e00\u4e2a\u50cf\u7d20\u989c\u8272\u6240\u9700\u7684\u4f4d\u6570\uff08bit\uff09\uff0c\u4e00\u822c\u6765\u8bf4\u6709\u8fd9\u4e48\u51e0\u79cd\uff1a1\u4f4d\uff0c8\u4f4d\uff0c16\u4f4d\uff0c24\u4f4d\uff0c32\u4f4d\u3002\uff0c\u6bd4\u59821\u4f4d\u7684\u5c4f\uff0c\u4e5f\u5c31\u662f\u5355\u8272\u5c4f\uff0c\u75281bit\u6765\u8868\u793a\u989c\u8272\uff0c\u5982\u679c\u662f\u767d\u8272\u5355\u8272\u5c4f\u7684\u8bdd\uff0c0\u8868\u793a\u9ed1\u8272\uff0c1\u8868\u793a\u767d\u8272\u300224bit\u5c4f\uff0c\u5c31\u662f\u752824bit\uff083\u5b57\u8282\uff09\u8868\u793a\u989c\u8272\uff0c\u4e5f\u5c31\u662fRGB888\uff0cR\u3001G\u3001B\u5206\u522b\u53608bit\u3002 \u200b \u4ece\u4e0a\u9762\u83b7\u53d6\u5230\u7684\u53c2\u6570\u77e5\u9053\uff0c\u8be5\u5c4f\u662f16bit\u7684\uff0c\u4e5f\u5c31\u662fRGB565\uff0c\u7528\u4e24\u4e2a\u5b57\u8282\u8868\u793a\u3002\u5e94\u4e3a\u4e4b\u524d\u7528mmap\u7533\u8bf7\u7684\u5185\u5b58\u662fchar\u6307\u9488\uff0c\u7528\u8be5\u6307\u9488\u6765\u64cd\u4f5c\u50cf\u7d20\u7684\u8bdd\u4e0d\u65b9\u4fbf\uff0c\u7d22\u6027\u5c31\u628achar\u578b\u8f6c\u6210short\u578b\uff0c\u5982\u4e0b\uff1a short *fb_s; fb_s = (short *)fbp; \u5b9a\u4e494\u4e2a\u5b8f\uff0c\u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u7eff\u8272\u3001\u84dd\u8272\u3001\u9ed1\u8272\uff0c #define RED 0xf800 #define GREEN 0x07e0 #define BLUE 0x001f #define BLACK 0x0000 \u521b\u5efa\u4e00\u4e2a\u5199framebuffer\u5185\u5b58\u7684\u51fd\u6570\uff0c\u5982\u4e0b\uff1a void fill_screen(short *fb_men,short color,int pix_size) { for(int i=0;i<pix_size;i++) { *fb_men = color; fb_men ++; } } \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6240\u8981\u64cd\u4f5c\u7684framebuffer\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6240\u8981\u586b\u5145\u7684\u989c\u8272\uff0c\u7b2c\u4e09\u4e2a\u662f\u5c4f\u5e55\u7684\u5c3a\u5bf8\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5bf9\u5c4f\u5e55\u8fdb\u884c\u586b\u5145\u4e86\uff0c\u5982\u4e0b\uff1a printf(\"Fill red\\n\"); fill_screen(fb_s,RED,screensize/2); sleep(1); printf(\"Fill green\\n\"); // fb_s = (short *)fbp; fill_screen(fb_s,GREEN,screensize/2); sleep(1); printf(\"Fill blue\\n\"); // fb_s = (short *)fbp; fill_screen(fb_s,BLUE,screensize/2); sleep(1); fill_screen(fb_s,BLACK,screensize/2); \u4e0a\u9762\u7684\u4ee3\u7801\u662f\u5148\u586b\u5145\u7ea2\u8272\uff0c\u7b49\u5f851\u79d2\uff0c\u7136\u540e\u662f\u7eff\u8272\u3001\u84dd\u8272\uff0c\u6700\u540e\u586b\u5145\u9ed1\u8272\uff08\u6e05\u5c4f\uff09\u3002\u6548\u679c\u5982\u4e0b\uff1a \u8be6\u7ec6\u4ee3\u7801 \uff1a framebuffer/fb_fill_color.c","title":"\u586b\u5145\u989c\u8272"},{"location":"kernel/fbtft/03/#_3","text":"\u73b0\u6709\u7684\u56fe\u7247\u683c\u5f0f\u975e\u5e38\u591a\uff0cJPEG\u3001TIFF\u3001PNG\u3001BMP\uff0cSVG\u7b49\u7b49\uff0c\u8fd9\u4e9b\u53c8\u5206\u6709\u538b\u7f29\u3001\u65e0\u538b\u7f29\u3002\u8fd9\u91cc\u662f\u4e3a\u4e86\u5b66\u4e60\u5982\u4f55\u64cd\u4f5cframebuffer\uff0c\u5c31\u9009\u62e9\u4e00\u79cd\u65e0\u538b\u7f29\u683c\u5f0f\u7684\u683c\u5f0f\u7684\u56fe\u7247\u6765\u64cd\u4f5c\u3002\u53ef\u4ee5\u76f4\u63a5\u4ee5\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\u8bfb\u53d6\u56fe\u7247\u6570\u636e\uff0c\u7136\u540e\u663e\u793a\u5230\u5c4f\u4e0a\u3002\u6bd4\u8f83\u5e38\u7528\u7684\u65e0\u538b\u7f29\u7684\u56fe\u7247\u662fBMP\uff0c\u8fd9\u91cc\u5c31\u9009\u62e9BMP\u683c\u5f0f\u7684\u56fe\u7247\u3002 \u200b BMP\u683c\u5f0f\u56fe\u7247\u6570\u636e\u6709\u4ee5\u4e0b4\u90e8\u5206\u7ec4\u6210\uff1a \u4f4d\u56fe\u5934\u6587\u4ef6\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542bBMP\u56fe\u50cf\u6587\u4ef6\u7684\u7c7b\u578b\u3001\u663e\u793a\u5185\u5bb9\u7b49\u4fe1\u606f\uff1b \u4f4d\u56fe\u4fe1\u606f\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u6709BMP\u56fe\u50cf\u7684\u5bbd\u3001\u9ad8\u3001\u538b\u7f29\u65b9\u6cd5\uff0c\u4ee5\u53ca\u5b9a\u4e49\u989c\u8272\u7b49\u4fe1\u606f\uff1b \u8c03\u8272\u677f\uff0c\u8fd9\u4e2a\u90e8\u5206\u662f\u53ef\u9009\u7684\uff0c\u6709\u4e9b\u4f4d\u56fe\u9700\u8981\u8c03\u8272\u677f\uff0c\u6709\u4e9b\u4f4d\u56fe\uff0c\u6bd4\u5982\u771f\u5f69\u8272\u56fe\uff0824\u4f4d\u7684BMP\uff09\u5c31\u4e0d\u9700\u8981\u8c03\u8272\u677f\uff1b \u4f4d\u56fe\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u7684\u5185\u5bb9\u6839\u636eBMP\u4f4d\u56fe\u4f7f\u7528\u7684\u4f4d\u6570\u4e0d\u540c\u800c\u4e0d\u540c\uff0c\u572824\u4f4d\u56fe\u4e2d\u76f4\u63a5\u4f7f\u7528RGB\uff0c\u800c\u5176\u4ed6\u7684\u5c0f\u4e8e24\u4f4d\u7684\u4f7f\u7528\u8c03\u8272\u677f\u4e2d\u989c\u8272\u7d22\u5f15\u503c\u3002 \u7531\u4ee5\u4e0a\u4fe1\u606f\u53ef\u4ee5\u77e5\u905324\u4f4d\u7684bmp\u56fe\u7247\uff0c\u6570\u636e\u90e8\u5206\u5c31\u662f\u56fe\u7247\u50cf\u7d20\u7684\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u8bf4\u8bfb\u53d624\u4f4dbmp\u56fe\u7247\u7684\u6570\u636e\u90e8\u5206\u4e0d\u7528\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u7528\uff0c\u6240\u4ee5\u8fd9\u91cc\u9009\u62e9\u4f7f\u752824bit\u7684BMP\u56fe\u7247\uff0c\u4ee5\u4e0b\u662f\u6211\u7528\u6765\u6d4b\u8bd5\u768424bit\u56fe\u7247\u4e2d\u7684\u4e00\u5f20\u56fe\u7247\u7684\u4fe1\u606f\uff1a BMP\u6587\u4ef6\u7684\u4f4d\u56fe\u5934\u8ddf\u4f4d\u56fe\u4fe1\u606f\u90e8\u5206\u5360BMP\u56fe\u7247\u6570\u636e\u7684\u524d54\u5b57\u8282\uff0c24\u4f4dBMP\u56fe\u7247\u7684\u56fe\u7247\u6570\u636e\u90e8\u5206\u5c31\u662f\u5269\u4e0b\u7684\u6240\u6709\u6570\u636e\u4e86\uff08\u7b2c55\u5b57\u8282\u5f00\u59cb\uff09\u3002\u8981\u5bf9BMP\u56fe\u7247\u7684\u4f4d\u56fe\u6570\u636e\u8fdb\u884c\u8bfb\uff0c\u8fd8\u9700\u8981\u51e0\u4e2a\u5173\u952e\u53c2\u6570\uff0c\u6240\u8bfb\u7684\u56fe\u7247\u7684\u5bbd\u3001\u9ad8\u3002\u8fd8\u6709\u989c\u8272\u6df1\u5ea6\uff08bpc\uff09,\u56e0\u4e3a\u9009\u7528\u4e8624\u4f4d\u7684\u56fe\u7247\uff0c\u989c\u8272\u6df1\u5ea6\u7b97\u662f\u5df2\u8fd1\u77e5\u9053\u4e86\u3002","title":"\u663e\u793a\u56fe\u7247"},{"location":"kernel/fbtft/03/#bmp","text":"\u9996\u5148\u83b7\u53d6BMP\u56fe\u7247\u7684\u4fe1\u606f\uff0c\u5b9a\u4e49\u4e2a\u7ed3\u6784\u4f53\uff1a typedef struct { uint16_t bfType; uint32_t bfSize; uint32_t biWidth; uint32_t biHeight; uint16_t biBitCount; }BMP_HEADER; \u8fd9\u4e2a\u7ed3\u6784\u4f53\u91cc\u9762\u7684\u5143\u7d20\u5206\u522b\u6709\u56fe\u7247\u7c7b\u578b\uff0c\u56fe\u7247\u6570\u636e\u5927\u5c0f\uff0c\u56fe\u7247\u7684\u5c3a\u5bf8\u8ddf\u989c\u8272\u6df1\u5ea6\u3002 \u521b\u5efa\u4e2a\u83b7\u53d6\u8be5\u7ed3\u6784\u56fe\u7684\u51fd\u6570\uff1a BMP_HEADER TFTBmpGetHeadInfo(uint8_t *buf) { BMP_HEADER bmpHead; bmpHead.bfType = (buf[0] << 8) + buf[1]; bmpHead.bfSize = (buf[5]<<24) + (buf[4]<<16) + (buf[3]<<8) + buf[2]; bmpHead.biWidth = (buf[21]<<24) + (buf[20]<<16) + (buf[19]<<8) + buf[18]; bmpHead.biHeight = (buf[25]<<24) + (buf[24]<<16) + (buf[23]<<8) + buf[22]; bmpHead.biBitCount = (buf[29] << 8) + buf[28]; return bmpHead; } \u6253\u5f00\u56fe\u7247\u5e76\u8bfb\u53d6\u524d54\u5b57\u8282\uff0c\u4f20\u7ed9\u51fd\u6570TFTBmpGetHeadInfo\uff0c\u7136\u540e\u5224\u65ad\u56fe\u7247\u683c\u5f0f\u662f\u5426\u4e3aBMP\uff0c\u989c\u8272\u6df1\u5ea6\u662f\u5426\u4e3a24bit\uff0c\u4e0d\u662f\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4e0d\u518d\u7ee7\u7eed\u8fd0\u884c\uff1a bmp_fd = open(argv[1], O_RDWR); if(bmp_fd <0) { printf(\"open file faile\\n\"); } if(read(bmp_fd,buffer,54) <0) { printf(\"read file \\\"%s\\\" faile\\n\",argv[1]); return -1; } bmp_header = TFTBmpGetHeadInfo(buffer); printf(\"%s's msg:\\n\",argv[1]); printf(\"\\ttype:%2x\\n\",bmp_header.bfType); printf(\"\\tsize:%d\\n\",bmp_header.bfSize); printf(\"\\tWidth:%d\\n\",bmp_header.biWidth); printf(\"\\tHeight:%d\\n\",bmp_header.biHeight); printf(\"\\tBitCount:%d\\n\",bmp_header.biBitCount); if(bmp_header.bfType != 0x424d) { printf(\"The picture is not bmp file\\n\"); return -1; } if(bmp_header.biBitCount != 24) { printf(\"Just support 24bit bmp file\\n\"); return -1; }","title":"\u83b7\u53d6BMP\u56fe\u7247\u4fe1\u606f"},{"location":"kernel/fbtft/03/#_4","text":"\u200b \u6211\u8fd9\u91cc\u5b9e\u73b0\u7684\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u8bfb\u53d6BMP\u56fe\u7247\u7684\u4e00\u884c\u5c31\u5199\u5230Framebuffer\u5bf9\u5e94\u7684\u7f13\u5b58\u4e2d\uff0c\u867d\u7136\u8981\u6c42read\u8bfb\u53d6\u6307\u5b9a\u4e2a\u5b57\u8282\uff0c\u53ef\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u5019\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u80fd\u591f\u8bfb\u53d6\u6240\u8981\u6c42\u7684\u5b57\u8282\u6570\u3002\u6240\u4ee5\u8fd8\u9700\u8981\u52a0\u4e2a\u5224\u65ad\uff0c\u5224\u65ad\u6bcf\u6b21\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u662f\u5426\u4e3a\u8fbe\u5230\u8981\u6c42\uff0c\u6ca1\u8fbe\u5230\u8981\u6c42\u5c31\u7ee7\u7eed\u8bfb\uff0c\u77e5\u9053\u8fbe\u5230\u8981\u6c42\u4e3a\u6b62\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a int perline_size = bmp_header.biWidth * bmp_header.biBitCount /8; char * readed_data = (char *)malloc(perline_size); int i=0; int line_count=0; int read_size = perline_size; int read_count=0; int read_per_line=0; int buf_offset=0; while((ret = read(bmp_fd,readed_data+buf_offset,read_size)) !=0) { if(ret == -1) { if(errno == EINTR) continue; perror(\"read\"); break; }else if(ret !=perline_size ) { read_per_line += ret; read_size = perline_size - read_per_line; buf_offset = read_per_line; }else read_per_line = ret; if(read_per_line == perline_size) { read_size = perline_size; buf_offset =0; read_per_line = 0; if(bits_per_pixel ==16) { short pixl = 0; if(screan_width > bmp_header.biWidth) { for(i=0;i<bmp_header.biWidth;i++) { short blue = (readed_data[i*3]>>3) & 0x001f; short green = (readed_data[i*3+1]>>2) & 0x003f; short red = (readed_data[i*3+2]>>3) & 0x001f; pixl = (red << 11 ) + (green << 5) + blue; *fb_s = pixl; fb_s ++; } fb_s += screan_width -bmp_header.biWidth ; }else if(screan_width <= bmp_header.biWidth) { for(i=0;i<screan_width;i++) { short blue = (readed_data[i*3]>>3) & 0x001f; short green = (readed_data[i*3+1]>>2) & 0x003f; short red = (readed_data[i*3+2]>>3) & 0x001f; pixl = (red << 11 ) + (green << 5) + blue; *fb_s = pixl; fb_s ++; } } } } line_count++; if(line_count >= screan_height) break; } \u8fd9\u91cc\u8fd8\u6d89\u53ca\u5230\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e\u4f7f\u7528\u7684\u56fe\u7247\u662f24bit\u7684\uff0c\u663e\u793a\u5c4f\u4f7f\u7528\u7684\u5374\u662f16\u4f4d\u7684\uff0c\u90a3\u5c31\u9700\u8981\u628a24bit\u8f6c\u621016bit\u4e86\uff0c\u5728\u505a\u4e4b\u524d\u5c31\u6709\u60f3\u8fc7\uff0c\u8f6c\u6362\u7684\u65f6\u5019\u662f\u53d6\u9ad8\u4f4d\u8fd8\u662f\u4f4e\u4f4d\u5462\uff1f\u4e00\u5f00\u59cb\uff0c\u6211\u662f\u53d6\u4f4e\u4f4d\u7684\uff0c\u4ee3\u7801\u4e3a\uff1a short blue = (readed_data[i*3]) & 0x001f; short green = (readed_data[i*3+1]) & 0x003f; short red = (readed_data[i*3+2]) & 0x001f; pixl = (red << 11 ) + (green << 5) + blue; *fb_s = pixl; fb_s ++; \u663e\u793a\u4e00\u5f20\u6709\u7ea2\u3001\u7eff\u3001\u84dd\u8272\u5757\u7684\u56fe\u7247\uff1a \u7ea2\u8272\u663e\u793a\u6709\u95ee\u9898\uff0c\u6b63\u5e38\u7684\u5982\u4e0b\uff1a \u8fd8\u6709\u663e\u793a\u4e00\u4e9b\u5176\u4ed6\u56fe\u7247\u7684\uff1a \u663e\u793a\u53ef\u7231\u7684\u7962\u8c46\u5b50\uff1a \u6700\u540e\u9644\u4e0a\u4e00\u5f20\u663e\u793a\u56fe\u7247\u65f6\u8f93\u51fa\u7684\u4fe1\u606f\uff1a \u8be6\u7ec6\u4ee3\u7801\uff1a show_bmp.c \u53c2\u8003\uff1a PNG\u3001JPEG\u3001BMP\u7b49\u51e0\u79cd\u56fe\u7247\u683c\u5f0f\u8be6\u89e3\uff08\u4e09\uff09\u2014\u2014 BMP","title":"\u628a\u56fe\u7247\u663e\u793a\u5230\u5c4f\u4e0a"},{"location":"uboot/bison_not_found/","text":"\u89e3\u51b3bison: not found \uf0c1 \u6267\u884cmake stm32mp15_basic_defconfig\u7f16\u8bd1U-boot\u7684\u65f6\u5019\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\uff1a HOSTCC scripts/basic/fixdep HOSTCC scripts/kconfig/conf.o YACC scripts/kconfig/zconf.tab.c /bin/sh: 1: bison: not found scripts/Makefile.lib:228: recipe for target 'scripts/kconfig/zconf.tab.c' failed make[1]: *** [scripts/kconfig/zconf.tab.c] Error 127 Makefile:496: recipe for target 'stm32mp15_basic_defconfig' failed make: *** [stm32mp15_basic_defconfig] Error 2 wyl@wyl-ub:~/STM32MPU_workspace/STM32MP15-Ecosystem-v1.0.0/u-boot-stm32mp-2018.11-r0/u-boot-2018.11$ make stm32mp15_trusted_defconfig YACC scripts/kconfig/zconf.tab.c /bin/sh: 1: bison: not found scripts/Makefile.lib:228: recipe for target 'scripts/kconfig/zconf.tab.c' failed make[1]: *** [scripts/kconfig/zconf.tab.c] Error 127 Makefile:496: recipe for target 'stm32mp15_trusted_defconfig' failed make: *** [stm32mp15_trusted_defconfig] Error 2 \u89e3\u51b3\u65b9\u6cd5\uff1a sudo apt-get install bison","title":"bison_not_found"},{"location":"uboot/bison_not_found/#bison-not-found","text":"\u6267\u884cmake stm32mp15_basic_defconfig\u7f16\u8bd1U-boot\u7684\u65f6\u5019\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\uff1a HOSTCC scripts/basic/fixdep HOSTCC scripts/kconfig/conf.o YACC scripts/kconfig/zconf.tab.c /bin/sh: 1: bison: not found scripts/Makefile.lib:228: recipe for target 'scripts/kconfig/zconf.tab.c' failed make[1]: *** [scripts/kconfig/zconf.tab.c] Error 127 Makefile:496: recipe for target 'stm32mp15_basic_defconfig' failed make: *** [stm32mp15_basic_defconfig] Error 2 wyl@wyl-ub:~/STM32MPU_workspace/STM32MP15-Ecosystem-v1.0.0/u-boot-stm32mp-2018.11-r0/u-boot-2018.11$ make stm32mp15_trusted_defconfig YACC scripts/kconfig/zconf.tab.c /bin/sh: 1: bison: not found scripts/Makefile.lib:228: recipe for target 'scripts/kconfig/zconf.tab.c' failed make[1]: *** [scripts/kconfig/zconf.tab.c] Error 127 Makefile:496: recipe for target 'stm32mp15_trusted_defconfig' failed make: *** [stm32mp15_trusted_defconfig] Error 2 \u89e3\u51b3\u65b9\u6cd5\uff1a sudo apt-get install bison","title":"\u89e3\u51b3bison: not found"},{"location":"uboot/uboot_start/","text":"\u83b7\u53d6uboot \uf0c1 \u4e0b\u8f7duboot wget https://www.st.com/content/ccc/resource/technical/sw-updater/firmware2/group0/6c/b7/e5/68/0b/d5/49/13/stm32cube_Standard_A7_BSP_components_u-boot/files/SOURCES-u-boot-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz/jcr:content/translations/en.SOURCES-u-boot-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u7136\u540e\u89e3\u538b\uff1a tar xvf en.SOURCES-u-boot-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u8fdb\u5165u-boot\u6240\u5728\u76ee\u5f55\uff1a cd stm32mp1-openstlinux-4.19-thud-mp1-19-02-20/sources/arm-openstlinux_weston-linux-gnueabi/u-boot-stm32mp-2018.11-r0 \u8be5\u76ee\u5f55\u6240\u5305\u542b\u7684\u6587\u4ef6\u5982\u4e0b\uff1a \u91cc\u9762\u6709\u4e00\u4e9b\u8865\u4e01\u6587\u4ef6\uff08*.path\uff09,\u6709\u4e2a\u8bf4\u660e\u6587\u4ef6\uff0c\u8fd8\u6709uboot\u6e90\u7801\uff1a \u89e3\u538buboot\u6e90\u7801\u5e76\u6253\u8865\u4e01\uff1a tar xvf v2018.11.tar.gz cd u-boot-2018.11 for p in `ls -1 ../*.patch`; do patch -p1 < $p; done \u7f16\u8bd1 \uf0c1 \u7f16\u8bd1\u4e4b\u524d\u9700\u8981\u8bbe\u7f6e\u4e0b\u73af\u5883\u53d8\u91cf (1)\uff1a\u7f16\u8bd1STM32MP157C-DK2 \uf0c1 basic boot\uff1a make stm32mp15_basic_defconfig make DEVICE_TREE=stm32mp157c-dk2 all trusted boot\uff1a make stm32mp15_basic_defconfig make DEVICE_TREE=stm32mp157c-dk2 all (2)\uff1a\u7f16\u8bd1STM32MP157C-EV1 \uf0c1 basic boot\uff1a make stm32mp15_trusted_defconfig make DEVICE_TREE=stm32mp157c-ev1 all trusted boot\uff1a make stm32mp15_trusted_defconfig make DEVICE_TREE=stm32mp157c-ev1 all \u53c2\u8003 \uf0c1 STM32MP1_Developer_Package U-Boot.README.HOW_TO","title":"\u73af\u5883"},{"location":"uboot/uboot_start/#uboot","text":"\u4e0b\u8f7duboot wget https://www.st.com/content/ccc/resource/technical/sw-updater/firmware2/group0/6c/b7/e5/68/0b/d5/49/13/stm32cube_Standard_A7_BSP_components_u-boot/files/SOURCES-u-boot-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz/jcr:content/translations/en.SOURCES-u-boot-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u7136\u540e\u89e3\u538b\uff1a tar xvf en.SOURCES-u-boot-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u8fdb\u5165u-boot\u6240\u5728\u76ee\u5f55\uff1a cd stm32mp1-openstlinux-4.19-thud-mp1-19-02-20/sources/arm-openstlinux_weston-linux-gnueabi/u-boot-stm32mp-2018.11-r0 \u8be5\u76ee\u5f55\u6240\u5305\u542b\u7684\u6587\u4ef6\u5982\u4e0b\uff1a \u91cc\u9762\u6709\u4e00\u4e9b\u8865\u4e01\u6587\u4ef6\uff08*.path\uff09,\u6709\u4e2a\u8bf4\u660e\u6587\u4ef6\uff0c\u8fd8\u6709uboot\u6e90\u7801\uff1a \u89e3\u538buboot\u6e90\u7801\u5e76\u6253\u8865\u4e01\uff1a tar xvf v2018.11.tar.gz cd u-boot-2018.11 for p in `ls -1 ../*.patch`; do patch -p1 < $p; done","title":"\u83b7\u53d6uboot"},{"location":"uboot/uboot_start/#_1","text":"\u7f16\u8bd1\u4e4b\u524d\u9700\u8981\u8bbe\u7f6e\u4e0b\u73af\u5883\u53d8\u91cf","title":"\u7f16\u8bd1"},{"location":"uboot/uboot_start/#1stm32mp157c-dk2","text":"basic boot\uff1a make stm32mp15_basic_defconfig make DEVICE_TREE=stm32mp157c-dk2 all trusted boot\uff1a make stm32mp15_basic_defconfig make DEVICE_TREE=stm32mp157c-dk2 all","title":"(1)\uff1a\u7f16\u8bd1STM32MP157C-DK2"},{"location":"uboot/uboot_start/#2stm32mp157c-ev1","text":"basic boot\uff1a make stm32mp15_trusted_defconfig make DEVICE_TREE=stm32mp157c-ev1 all trusted boot\uff1a make stm32mp15_trusted_defconfig make DEVICE_TREE=stm32mp157c-ev1 all","title":"(2)\uff1a\u7f16\u8bd1STM32MP157C-EV1"},{"location":"uboot/uboot_start/#_2","text":"STM32MP1_Developer_Package U-Boot.README.HOW_TO","title":"\u53c2\u8003"},{"location":"user/download_fw_sd/","text":"\u73af\u5883\uff1a \uf0c1 \u4e00\u53f0PC(window/linux) STM32CubeProgrammer \u6211\u4e0b\u8f7d\u5230\u7684\u662f2.1\u7248\u672c\uff0819\\07\\10\u4e0b\u8f7d\u7684\uff09 \u91cc\u9762\u7684\u6587\u4ef6\u662f\uff1a \u91cc\u9762\u67093\u4e2a\u6587\u4ef6\uff0c\u5206\u522bwindow\u3001Linux\u3001Mac\u4e0b\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u8f6f\u4ef6\u652f\u63013\u4e2a\u7cfb\u7edf \u5b89\u88c5 \uf0c1 1. window \uf0c1 windows\u4e0b\u76f4\u63a5\u53cc\u51fb\u5373\u53ef\uff0c 2.Linux \uf0c1 Linux\u4e0b\u9700\u8981\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\uff1a ./SetupSTM32CubeProgrammer-2.0.0.linux \u7136\u540e\u628a\u5b89\u88c5\u76ee\u5f55\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf \u4f7f\u7528 \uf0c1 1.window \uf0c1 \u6211\u7684\u7535\u8111\u662fwindow7 64bit\uff0c \u7528STM32CubeProgrammer\u65e0\u6cd5\u641c\u5230DFU\u8bbe\u5907\uff0c\u53ef\u662f\u6211\u7684\u7535\u8111\u662f\u6709DFU\u8bbe\u5907\u7684\uff1a \u4f7f\u7528\u547d\u4ee4\u884c\u7684\u8bdd\uff0c\u4e5f\u627e\u4e0d\u5230\u8bbe\u5907\uff1a \u200b 2.Linux \uf0c1 \u628a\u8bbe\u5907\u63d2\u5230\u7535\u8111\u4e0a\uff0c\u7528 lsusb \u67e5\u770bUSB\u8bbe\u5907\uff1a \u4f7f\u7528\u547d\u4ee4\u884c\u6253\u5f00\uff1a halin@halin-PC:~/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin$ sudo ./STM32CubeProgrammer \u7531\u4e8e\u6211\u6ca1\u6709\u628a\u5b89\u88c5\u76ee\u5f55\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\uff0c\u6211\u76f4\u63a5\u5230\u5b89\u88c5\u76ee\u5f55\u8fd0\u884c\uff0c\u800c\u4e14\u5fc5\u987b\u52a0\u4e0a sudo ,\u4e0d\u7136\u4f1a\u627e\u4e0d\u5230\u8bbe\u5907\uff0c\u6253\u5f00\u540e,\u8fde\u63a5\u65b9\u5f0f\u9009\u62e9USB\uff0c\u8fde\u63a5\u4e86\u8bbe\u5907\u540e\u5982\u4e0b\uff1a \u6253\u5f00 tsv \u6587\u4ef6 \u6253\u5f00Image\u6587\u4ef6\u5939 \u7136\u540e\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u6210\u529f\u540e\u5982\u4e0b\uff1a \u70e7\u5f55\u8fc7\u6210\u529f\uff0c\u5982\u679cDK2\u63a5\u4e86LCD\uff0cLCD\u4f1a\u663e\u793a\u4e00\u4e9b\u6587\u5b57\u4fe1\u606f\uff1a \u200b uart4(debug \u53e3)\u4e5f\u6709\u8f93\u51fa\u4e00\u4e9b\u4fe1\u606f\uff1a \u200b window \u4e0b\u5b89\u88c5\u9a71\u52a8 \uf0c1 \u56e0\u4e3a\u4e4b\u524d\u770b\u5230\u7684\u4fe1\u606f\u662f\u901a\u8fc7USB DFU\u4e0b\u8f7d\u7684\u8bdd\uff0cSTM32MP1X\u662f\u5904 \u4e8eDFU mode\uff0c\u5f53\u6211\u628aDK2\u63d2\u5165\u5230windnow\u65f6\uff0c\u51fa\u73b0\u5982\u4e0b\u8bbe\u5907\uff1a \u6211\u4ee5\u4e3a\u5c31\u662f\u5bf9\u7684\uff0c\u53ef\u662fSTM32CubeProgrammer\u65e0\u6cd5\u8fde\u63a5\u8be5\u8bbe\u5907\uff0c\u540e\u6765\u8ba4\u771f\u770b\u4e86\u4e0b\u6587\u6863\uff08 How to proceed when the DFU driver installation fails on Windows host PC \uff09\uff0c\u624d\u77e5\u9053\u9700\u8981\u53e6\u5916\u7684\u9a71\u52a8\uff0c \u9996\u5148\u628a\u539f\u6765\u7684\u9a71\u52a8\u5220\u4e86\uff0c\u7136\u540e\u5230STM32CubeProgrammer\u7684\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 Drivers\\DFU_Driver \uff0c\u6211\u7535\u8111\u662f\uff1a C:\\Program Files\\STMicroelectronics\\STM32Cube\\STM32CubeProgrammer\\Drivers\\DFU_Driver \u91cc\u9762\u6709\u4e2a\u6587\u4ef6\uff1a STM32Bootloader.bat \uff0c\u53cc\u51fb\u6253\u5f00\u5c31\u53ef\u4ee5\u5b89\u88c5\u5bf9\u5e94\u7684\u9a71\u52a8\u4e86\uff0c\u5b89\u88c5\u5b8c\u540e\u51fa\u73b0\u5982\u4e0b\u8bbe\u5907\uff1a \u5c31\u53ef\u4ee5\u5728window\u4e0b\u901a\u8fc7STM32CubeProgrammer\u7ed9STM32MP15X\u4e0b\u8f7d\u56fa\u4ef6\u4e86 \u53c2\u8003\uff1a STM32CubeProgrammer software description","title":"\u901a\u8fc7USB\u70e7\u5f55\u7cfb\u7edf\u5230SD\u5361"},{"location":"user/download_fw_sd/#_1","text":"\u4e00\u53f0PC(window/linux) STM32CubeProgrammer \u6211\u4e0b\u8f7d\u5230\u7684\u662f2.1\u7248\u672c\uff0819\\07\\10\u4e0b\u8f7d\u7684\uff09 \u91cc\u9762\u7684\u6587\u4ef6\u662f\uff1a \u91cc\u9762\u67093\u4e2a\u6587\u4ef6\uff0c\u5206\u522bwindow\u3001Linux\u3001Mac\u4e0b\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u4e2a\u8f6f\u4ef6\u652f\u63013\u4e2a\u7cfb\u7edf","title":"\u73af\u5883\uff1a"},{"location":"user/download_fw_sd/#_2","text":"","title":"\u5b89\u88c5"},{"location":"user/download_fw_sd/#1-window","text":"windows\u4e0b\u76f4\u63a5\u53cc\u51fb\u5373\u53ef\uff0c","title":"1. window"},{"location":"user/download_fw_sd/#2linux","text":"Linux\u4e0b\u9700\u8981\u5728\u547d\u4ee4\u884c\u4e2d\u6267\u884c\uff1a ./SetupSTM32CubeProgrammer-2.0.0.linux \u7136\u540e\u628a\u5b89\u88c5\u76ee\u5f55\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf","title":"2.Linux"},{"location":"user/download_fw_sd/#_3","text":"","title":"\u4f7f\u7528"},{"location":"user/download_fw_sd/#1window","text":"\u6211\u7684\u7535\u8111\u662fwindow7 64bit\uff0c \u7528STM32CubeProgrammer\u65e0\u6cd5\u641c\u5230DFU\u8bbe\u5907\uff0c\u53ef\u662f\u6211\u7684\u7535\u8111\u662f\u6709DFU\u8bbe\u5907\u7684\uff1a \u4f7f\u7528\u547d\u4ee4\u884c\u7684\u8bdd\uff0c\u4e5f\u627e\u4e0d\u5230\u8bbe\u5907\uff1a \u200b","title":"1.window"},{"location":"user/download_fw_sd/#2linux_1","text":"\u628a\u8bbe\u5907\u63d2\u5230\u7535\u8111\u4e0a\uff0c\u7528 lsusb \u67e5\u770bUSB\u8bbe\u5907\uff1a \u4f7f\u7528\u547d\u4ee4\u884c\u6253\u5f00\uff1a halin@halin-PC:~/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin$ sudo ./STM32CubeProgrammer \u7531\u4e8e\u6211\u6ca1\u6709\u628a\u5b89\u88c5\u76ee\u5f55\u6dfb\u52a0\u5230\u73af\u5883\u53d8\u91cf\uff0c\u6211\u76f4\u63a5\u5230\u5b89\u88c5\u76ee\u5f55\u8fd0\u884c\uff0c\u800c\u4e14\u5fc5\u987b\u52a0\u4e0a sudo ,\u4e0d\u7136\u4f1a\u627e\u4e0d\u5230\u8bbe\u5907\uff0c\u6253\u5f00\u540e,\u8fde\u63a5\u65b9\u5f0f\u9009\u62e9USB\uff0c\u8fde\u63a5\u4e86\u8bbe\u5907\u540e\u5982\u4e0b\uff1a \u6253\u5f00 tsv \u6587\u4ef6 \u6253\u5f00Image\u6587\u4ef6\u5939 \u7136\u540e\u4e0b\u8f7d\uff0c\u4e0b\u8f7d\u6210\u529f\u540e\u5982\u4e0b\uff1a \u70e7\u5f55\u8fc7\u6210\u529f\uff0c\u5982\u679cDK2\u63a5\u4e86LCD\uff0cLCD\u4f1a\u663e\u793a\u4e00\u4e9b\u6587\u5b57\u4fe1\u606f\uff1a \u200b uart4(debug \u53e3)\u4e5f\u6709\u8f93\u51fa\u4e00\u4e9b\u4fe1\u606f\uff1a \u200b","title":"2.Linux"},{"location":"user/download_fw_sd/#window","text":"\u56e0\u4e3a\u4e4b\u524d\u770b\u5230\u7684\u4fe1\u606f\u662f\u901a\u8fc7USB DFU\u4e0b\u8f7d\u7684\u8bdd\uff0cSTM32MP1X\u662f\u5904 \u4e8eDFU mode\uff0c\u5f53\u6211\u628aDK2\u63d2\u5165\u5230windnow\u65f6\uff0c\u51fa\u73b0\u5982\u4e0b\u8bbe\u5907\uff1a \u6211\u4ee5\u4e3a\u5c31\u662f\u5bf9\u7684\uff0c\u53ef\u662fSTM32CubeProgrammer\u65e0\u6cd5\u8fde\u63a5\u8be5\u8bbe\u5907\uff0c\u540e\u6765\u8ba4\u771f\u770b\u4e86\u4e0b\u6587\u6863\uff08 How to proceed when the DFU driver installation fails on Windows host PC \uff09\uff0c\u624d\u77e5\u9053\u9700\u8981\u53e6\u5916\u7684\u9a71\u52a8\uff0c \u9996\u5148\u628a\u539f\u6765\u7684\u9a71\u52a8\u5220\u4e86\uff0c\u7136\u540e\u5230STM32CubeProgrammer\u7684\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684 Drivers\\DFU_Driver \uff0c\u6211\u7535\u8111\u662f\uff1a C:\\Program Files\\STMicroelectronics\\STM32Cube\\STM32CubeProgrammer\\Drivers\\DFU_Driver \u91cc\u9762\u6709\u4e2a\u6587\u4ef6\uff1a STM32Bootloader.bat \uff0c\u53cc\u51fb\u6253\u5f00\u5c31\u53ef\u4ee5\u5b89\u88c5\u5bf9\u5e94\u7684\u9a71\u52a8\u4e86\uff0c\u5b89\u88c5\u5b8c\u540e\u51fa\u73b0\u5982\u4e0b\u8bbe\u5907\uff1a \u5c31\u53ef\u4ee5\u5728window\u4e0b\u901a\u8fc7STM32CubeProgrammer\u7ed9STM32MP15X\u4e0b\u8f7d\u56fa\u4ef6\u4e86 \u53c2\u8003\uff1a STM32CubeProgrammer software description","title":"window \u4e0b\u5b89\u88c5\u9a71\u52a8"},{"location":"user/env/","text":"\u5f00\u53d1\u73af\u5883 \uf0c1 1\u3001\u5b89\u88c5ubuntu \uf0c1 ST\u5b98\u65b9\u63a8\u8350\u4f7f\u7528ubuntu 1604 64bit\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u5230PC\u91cc\u4e5f\u53ef\u4ee5\u662f\u865a\u62df\u673a(\u53c2\u8003 PC_prerequisites )\u3002 \u5b89\u88c5\u5b8c\u7cfb\u7edf\u540e\uff0c\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u4f9d\u8d56\u548c\u8f6f\u4ef6\uff1a sudo apt-get update sudo apt-get install sed wget curl cvs subversion git-core coreutils unzip texi2html texinfo docbook-utils gawk python-pysqlite2 diffstat help2man make gcc build-essential g++ desktop-file-utils chrpath libxml2-utils xmlto docbook bsdmainutils iputils-ping cpio python-wand python-pycryptopp python-crypto sudo apt-get install libsdl1.2-dev xterm corkscrew nfs-common nfs-kernelserver device-tree-compiler mercurial u-boot-tools libarchive-zip-perl sudo apt-get install ncurses-dev bc linux-headers-generic gcc-multilib libncurses5-dev libncursesw5-dev lrzsz dos2unix lib32ncurses5 repo libssldev sudo apt-get install default-jre 2\u3001\u5b89\u88c5\u7f16\u8bd1\u5668 \uf0c1 \u53c2\u8003 Install_the_SDK \uff0c \u4e0b\u8f7d\uff1a wget https://www.st.com/content/ccc/resource/technical/software/sw_development_suite/group0/32/5e/0d/c9/05/87/40/c0/stm32mp1dev_yocto_sdk/files/SDK-x86_64-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz/jcr:content/translations/en.SDK-x86_64-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u89e3\u538b\uff1a tar xvf en.SDK-x86_64-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u4fee\u6539\u6743\u9650\uff1a chmod +x stm32mp1-openstlinux-4.19-thud-mp1-19-02-20/sdk/st-image-weston-openstlinux-weston-stm32mp1-x86_64-toolchain-2.6-openstlinux-4.19-thud-mp1-19-02-20.sh \u65b0\u5efa\u4e2a\u76ee\u5f55\u7528\u505a\u8be5\u7f16\u8bd1\u5668\u7684\u5b89\u88c5\u76ee\u5f55\uff1a mkdir STM32MP cd STM32MP mkdir SDK \u5b89\u88c5\uff1a $HOME/stm32mp1-openstlinux-4.19-thud-mp1-19-02-20/sdk/st-image-weston-openstlinux-weston-stm32mp1-x86_64-toolchain-2.6-openstlinux-4.19-thud-mp1-19-02-20.sh -d $HOME/STM32MP/SDK 3\u3001\u4f7f\u7528SDK \uf0c1 SDK\u7684\u5b89\u88c5\u76ee\u5f55\u63d0\u4f9b\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u7528\u6765\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u8be5\u811a\u672c\u6587\u4ef6\u662f\uff1a $HOME/STM32MP/SDK/environment-setup-cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi \u770b\u4e0b\u8be5\u811a\u672c\u6587\u4ef6\u4e2d\u6709\u4ec0\u4e48\u5185\u5bb9\uff1a \u8be5\u6587\u4ef6\u4e3b\u8981\u5c31\u662f\u8bbe\u7f6e\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u8981\u7528arm-openstlinux_weston-linux-gnueabi-gcc\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf CC \u3002 \u9996\u5148\u4f7f\u80fd\u73af\u5883\u53d8\u91cf source $HOME/STM32MP/SDK/environment-setup-cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi \u67e5\u770b\u4e0b CC \u662f\u4ec0\u4e48\u5185\u5bb9\uff1a hl@hl-ub:~$ echo $CC arm-openstlinux_weston-linux-gnueabi-gcc -march=armv7ve -mthumb -mfpu=neon-vfpv4 -mfloat-abi=hard -mcpu=cortex-a7 --sysroot=/home/ub/STM32MPU_workspace/STM32MP15-Ecosystem-v1.0.0/Developer-Package/SDK/sysroots/cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi \u53ef\u4ee5\u770b\u5230 CC \u6307\u5b9a\u4e86\u7f16\u8bd1\u5668\uff0c\u8bbe\u7f6e\u4e86\u7f16\u8bd1\u9009\u9879\uff0c\u8fd8\u6307\u5b9a\u4e86sysroot\u8def\u52b2 \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684C\u7a0b\u5e8f\uff0c\u4fdd\u5b58\u4e3ahelloworld.c\uff1a #include <stdio.h> int main(int argc,char **argv) { printf(\u201cHello STM32MP1\\n\u201d); return 0 } \u7f16\u8bd1\uff1a $CC -o helloworld helloworld.c \u7136\u540e\u770b\u4e0b\u6587\u4ef6helloword\u4fe1\u606f\uff1a","title":"\u5f00\u53d1\u73af\u5883"},{"location":"user/env/#_1","text":"","title":"\u5f00\u53d1\u73af\u5883"},{"location":"user/env/#1ubuntu","text":"ST\u5b98\u65b9\u63a8\u8350\u4f7f\u7528ubuntu 1604 64bit\uff0c\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u5230PC\u91cc\u4e5f\u53ef\u4ee5\u662f\u865a\u62df\u673a(\u53c2\u8003 PC_prerequisites )\u3002 \u5b89\u88c5\u5b8c\u7cfb\u7edf\u540e\uff0c\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u4f9d\u8d56\u548c\u8f6f\u4ef6\uff1a sudo apt-get update sudo apt-get install sed wget curl cvs subversion git-core coreutils unzip texi2html texinfo docbook-utils gawk python-pysqlite2 diffstat help2man make gcc build-essential g++ desktop-file-utils chrpath libxml2-utils xmlto docbook bsdmainutils iputils-ping cpio python-wand python-pycryptopp python-crypto sudo apt-get install libsdl1.2-dev xterm corkscrew nfs-common nfs-kernelserver device-tree-compiler mercurial u-boot-tools libarchive-zip-perl sudo apt-get install ncurses-dev bc linux-headers-generic gcc-multilib libncurses5-dev libncursesw5-dev lrzsz dos2unix lib32ncurses5 repo libssldev sudo apt-get install default-jre","title":"1\u3001\u5b89\u88c5ubuntu"},{"location":"user/env/#2","text":"\u53c2\u8003 Install_the_SDK \uff0c \u4e0b\u8f7d\uff1a wget https://www.st.com/content/ccc/resource/technical/software/sw_development_suite/group0/32/5e/0d/c9/05/87/40/c0/stm32mp1dev_yocto_sdk/files/SDK-x86_64-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz/jcr:content/translations/en.SDK-x86_64-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u89e3\u538b\uff1a tar xvf en.SDK-x86_64-stm32mp1-openstlinux-4.19-thud-mp1-19-02-20.tar.xz \u4fee\u6539\u6743\u9650\uff1a chmod +x stm32mp1-openstlinux-4.19-thud-mp1-19-02-20/sdk/st-image-weston-openstlinux-weston-stm32mp1-x86_64-toolchain-2.6-openstlinux-4.19-thud-mp1-19-02-20.sh \u65b0\u5efa\u4e2a\u76ee\u5f55\u7528\u505a\u8be5\u7f16\u8bd1\u5668\u7684\u5b89\u88c5\u76ee\u5f55\uff1a mkdir STM32MP cd STM32MP mkdir SDK \u5b89\u88c5\uff1a $HOME/stm32mp1-openstlinux-4.19-thud-mp1-19-02-20/sdk/st-image-weston-openstlinux-weston-stm32mp1-x86_64-toolchain-2.6-openstlinux-4.19-thud-mp1-19-02-20.sh -d $HOME/STM32MP/SDK","title":"2\u3001\u5b89\u88c5\u7f16\u8bd1\u5668"},{"location":"user/env/#3sdk","text":"SDK\u7684\u5b89\u88c5\u76ee\u5f55\u63d0\u4f9b\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u7528\u6765\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u8be5\u811a\u672c\u6587\u4ef6\u662f\uff1a $HOME/STM32MP/SDK/environment-setup-cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi \u770b\u4e0b\u8be5\u811a\u672c\u6587\u4ef6\u4e2d\u6709\u4ec0\u4e48\u5185\u5bb9\uff1a \u8be5\u6587\u4ef6\u4e3b\u8981\u5c31\u662f\u8bbe\u7f6e\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\uff0c\u6bd4\u5982\uff0c\u5982\u679c\u4f60\u8981\u7528arm-openstlinux_weston-linux-gnueabi-gcc\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528\u53d8\u91cf CC \u3002 \u9996\u5148\u4f7f\u80fd\u73af\u5883\u53d8\u91cf source $HOME/STM32MP/SDK/environment-setup-cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi \u67e5\u770b\u4e0b CC \u662f\u4ec0\u4e48\u5185\u5bb9\uff1a hl@hl-ub:~$ echo $CC arm-openstlinux_weston-linux-gnueabi-gcc -march=armv7ve -mthumb -mfpu=neon-vfpv4 -mfloat-abi=hard -mcpu=cortex-a7 --sysroot=/home/ub/STM32MPU_workspace/STM32MP15-Ecosystem-v1.0.0/Developer-Package/SDK/sysroots/cortexa7t2hf-neon-vfpv4-openstlinux_weston-linux-gnueabi \u53ef\u4ee5\u770b\u5230 CC \u6307\u5b9a\u4e86\u7f16\u8bd1\u5668\uff0c\u8bbe\u7f6e\u4e86\u7f16\u8bd1\u9009\u9879\uff0c\u8fd8\u6307\u5b9a\u4e86sysroot\u8def\u52b2 \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684C\u7a0b\u5e8f\uff0c\u4fdd\u5b58\u4e3ahelloworld.c\uff1a #include <stdio.h> int main(int argc,char **argv) { printf(\u201cHello STM32MP1\\n\u201d); return 0 } \u7f16\u8bd1\uff1a $CC -o helloworld helloworld.c \u7136\u540e\u770b\u4e0b\u6587\u4ef6helloword\u4fe1\u606f\uff1a","title":"3\u3001\u4f7f\u7528SDK"},{"location":"user/sd/","text":"\u5728\u73a9STM32MP157C-DK2\uff0c\u8fd9\u4e2a\u677f\u5b50\u53ea\u80fd\u7528SD\u5361\u4f5c\u5b58\u50a8\u4ecb\u8d28\uff0cuboot\u3001kernel\u3001rootfs\u90fd\u662f\u653e\u5728SD\u5361\u91cc\u9762\uff0c\u5bf9\u70e7\u5f55\u8fc7\u8f6f\u4ef6\u7684SD\u5361\u91cc\u9762\u7684\u6570\u636e\u5f88\u611f\u5174\u8da3\uff0c\u8fd9\u91cc\u4ece\u4e0d\u540c\u7684\u65b9\u5f0f\u67e5\u770bSD\u5361\u91cc\u9762\u7684\u6587\u4ef6/\u6570\u636e\u3002\u6211\u6b63\u5728\u7528\u7740\u4e2aSD\u5361\u662f16G\u7684\u3002\u70e7\u5f55\u7684\u7cfb\u7edf\u662fST\u5b98\u65b9\u7684Starter Package. \u5728window\u4e2d\u7528WinHex\u67e5\u770b \uf0c1 \u628a\u70e7\u5f55\u4e86\u56fa\u4ef6\u7684SD\u5361\u901a\u8fc7\u8bfb\u5361\u5668\u63d2\u5230Win7\uff0c\u7531\u4e8ewindow\u4e0d\u652f\u6301SD\u5361\u4e2d\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e0d\u80fd\u901a\u8fc7\u6587\u4ef6\u7ba1\u7406\u5668\u6253\u5f00\u67e5\u770bSD\u5361\uff0c\u5728\u6211\u7684\u7535\u8111\u4e0a\u4f1a\u5f39\u51fa\u5982\u4e0b\u5bf9\u8bdd\u6846\uff1a \u4f46\u662f\u53ef\u4ee5\u7528WinHex\u6253\u5f00\uff0c\u6253\u5f00\u540e\u5982\u4e0b\uff1a \u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0cSD\u5361\u88ab\u5206\u4e3a\u4e869\u4e2a\u533a\u3002\u5176\u4e2d4\u30015\u30016\u30017\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c\u4f7f\u7528\u4e86Ext4\u683c\u5f0f\u3002 \u5728Linux\u4e2d\u901a\u8fc7\u6587\u4ef6\u7ba1\u7406\u5668\u67e5\u770b \uf0c1 \u628a\u6709\u56fa\u4ef6\u7684SD\u5361\u7528\u8bfb\u5361\u5668\u63a5\u5230Linux PC\uff0c\u4f1a\u67094\u4e2a\u78c1\u76d8\uff0c\u5982\u4e0b\uff1a \u6b63\u597d\u4e0ewin7\u4e2d\u7528winHex\u6253\u5f00\uff0c\u770b\u5230\u76844\u4e2aExt4\u683c\u5f0f\u7684\u5206\u533a\u5bf9\u5e94\uff0c 4\u4e2a\u5206\u533a\u4e2d\u7684\u6587\u4ef6\u4e3a\uff1a 1.bootfs \uf0c1 2.rootfs \uf0c1 3.userfs \uf0c1 4.vendorfs \uf0c1 GPT \uf0c1 1.\u542f\u52a8\u6d41\u7a0b \uf0c1 \u4eceSD\u5361\u542f\u52a8\u7684\u6d41\u7a0b\uff1a bootrom \u4eceSD\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u7684FSBL\uff0c\u4e5f\u5c31\u662fuboot spl,\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c FSBL\u518d\u4eceSD\u5361\u8bfb\u53d6SSBL\uff0cuboot\u90e8\u5206\uff0c\u4e5f\u662f\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf FSBL\u662f\u5728DRAM\u8dd1\u7684\uff0c\u53ef\u662f\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\u7684\u5e94\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u652f\u6301\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5FSBL\u4eceSD\u5361\u4e2d\u7684\u5206\u533a\u8868\u8bfb\u53d6\u5176\u4ed6\u7684\u542f\u52a8\u4fe1\u606f\u6839\u5185\u6838\uff0c\u542f\u52a8\u5185\u6838 \u90a3\u600e\u4e48\u4eceSD\u5361\u4e2d\u5b9a\u4f4dFSBL\u3001SSBL\uff1f 2.\u78c1\u76d8\u5206\u533a \uf0c1 \u8fd9\u4e2a\u8ddf\u78c1\u76d8\u5206\u533a\u6709\u5173\uff0cSTM32MP157\u7528\u7684\u662fGPT\u5206\u533a\uff0c\u5728SD\u5361\u7684\u524d\u51e0\u4e2a\u5206\u533a\u6709SD\u5361\u7684\u5206\u533a\u4fe1\u606f\uff0c\u4ece\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u4fe1\u606f\u5b58\u653e\u5728\u54ea\u91cc\uff0cGPT\u5206\u533a\u7ed3\u6784\u5982\u4e0b\uff1a GPT\u5206\u533a\u7684\u5206\u533a\u8868\uff1a LBA 0 \u4fdd\u62a4\u6027MBR LBA 1 GPT\u5934 LBA 2-33 \u5206\u533a\u8868\u9879\uff0c\u8bb0\u5f55\u4e86\u5404\u4e2a\u5206\u533a\u7684\u4fe1\u606f \u5206\u533a LBA -33 - -1 \u662fGPT\u5934\u8ddf\u5206\u533a\u8868\u9879\u7684\u5907\u4efd\u90e8\u5206 LBA 0 \uf0c1 \u4fdd\u62a4\u6027 MBR (Protective MBR )\uff0c\u5728\u78c1\u76d8\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\uff08LBA 0\uff09\uff0cProtective MBR \u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u200b STM32MP SD\u5361\u4e2d\u4fdd\u62a4\u6027MBR\u4e3a\uff1a 00 00 00 00 ee 00 00 00 01 00 00 00 ff cb da 01 \u5176\u4e2d0xee\u503c\u6807\u6ce8\u4e86\u8be5\u5206\u533a\u4e3aGPT\u5206\u533a LBA 1 \uf0c1 GPT\u5934\uff0c\u4e0b\u56fe\u662fSTM32MPU1 SD\u5361\u4e2d\u7684LBA 1\u4e2d\u7684\u6570\u636e\uff1a \u524d8\u5b57\u8282\u662f\u7b7e\u540d\uff08Signature\uff09\uff0c EFI PART \uff080x5452415020494645\uff09\uff0c 4\u5b57\u8282\u7684\u7248\u672c\u53f7\uff1a0x00010000 4\u81ea\u5df1\u7684GPT header\u5927\u5c0f\uff1a0x0000005c\uff0c92\u5b57\u8282\uff0c 4\u5b57\u8282\u7684HeaderCRC32 4\u5b57\u8282\u4fdd\u7559\uff0c\u4e3a0x00 8\u5b57\u8282\u5730\u5740\uff0c\u5f53\u524d\u6570\u636e\u6240\u5728\u7684LBA 8\u5b57\u8282\u5730\u5740\uff0cGPT Header\u5907\u4efd\u6240\u5728LBA\uff0c\u8fd9\u91cc\u662f0x1dacbff\uff0c\u4e0b\u56fe\u662fWinHex\u4e2d\u7684\u7b2c0x1dacbff\u6247\u533a\u7684\u6570\u636e\uff1a 8\u5b57\u8282\u5730\u5740\uff0c\u7b2c\u4e00\u4e2a\u5206\u533a\u6240\u5728\u5730\u5740\uff0c0x00000000 00000022\uff0c\u5341\u8fdb\u5236\u662f34\uff0c\u5728WinHex\u4e2d\u8df3\u8f6c\u523034\u6247\u533a\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a\u6b63\u597d\u662fPartition 1\u6240\u5728\u7684\u4f4d\u7f6e\uff0c 8\u5b57\u8282\u5730\u5740\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u533a\u6240\u5728\u5730\u5740\uff1a0x00000000 01dacbde 16\u5b57\u8282\uff0c\u78c1\u76d8\u7684GUID\uff0c\u5373\u552f\u4e00\u6807\u8bc6\u7b26 GPT\u5165\u53e3\uff0c\u5373\u5f00\u59cb\u6240\u5728\u7684LBA 4\u5b57\u8282\uff1a0x00 00 00 80 = 128\uff0c\u5206\u533a\u8868\u603b\u9879\u6570\uff0c\u901a\u5e38\u9650\u5b9a\u4e3a\u201c80 00 00 00\u201d(0x80)\uff0c\u4e5f\u5c31\u662f128\u4e2a\u3002 4\u5b57\u8282\uff0c\u6bcf\u4e2a\u5206\u533a\u8868\u9879\u5360\u7528\u5b57\u8282\u6570\uff0c\u901a\u5e38\u9650\u5b9a\u4e3a\u201c80 00 00 00\u201d(0x80)\uff0c\u4e5f\u5c31\u662f128\u5b57\u8282\u3002 4\u5b57\u8282\uff0cPartitionEntryArrayCRC32\uff0c\u5206\u533a\u8868CRC\u6821\u9a8c\u548c \u4e3a\u4e86\u51cf\u5c11\u5206\u533a\u8868\u635f\u574f\u7684\u98ce\u9669\uff0cGPT\u5728\u786c\u76d8\u6700\u540e\u4fdd\u5b58\u4e86\u4e00\u4efd\u5206\u533a\u8868\u7684\u526f\u672c\u3002(GPT\u6570\u636e\u7ed3\u6784\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u4e24\u6b21\uff1a\u5f00\u59cb\u548c\u7ed3\u675f\u5404\u4e00\u6b21\u3002) 3 \u5206\u533a\u8868\u9879 \uf0c1 \u5206\u533a\u8868\u7684\u683c\u5f0f \uf0c1 \u5206\u533a\u8868\u7684\u683c\u5f0f\u5982\u4e0b\uff1a \u7b2c\u4e00\u4e2a\u662f\u5206\u533a\u7c7b\u578bGUID\uff0c16\u5b57\u8282 \u7b2c\u4e8c\u4e2a\u662f\u5206\u533aGUID\uff0c16\u5b57\u8282 \u7b2c\u4e09\u4e2a\u662f\u8d77\u59cbLBA\uff0c8\u5b57\u8282\uff0c \u7b2c\u56db\u4e2a\u662f\u672b\u5c3eLBA\uff0c8\u5b57\u8282\uff0c \u7b2c\u4e94\u4e2a\u662f\u5c5e\u6027\uff0c \u7b2c\u516d\u90e8\u5206\u662f\u5206\u533a\u540d STM32MPU\u4e2d\u7684\u5206\u533a\u8868\u9879 \uf0c1 \u7b2c\u4e00\u90e8\u5206\uff1a \u5206\u533a\u7c7b\u578bGUID\uff0c\u539f\u59cb\u6570\u636e\u662f\uff1a a2 a0 d0 eb e5 b9 33 44 87 c0 68 b6 b7 26 99 c7 \u7531\u4e8e\u8fd9\u91cc\u662f\u5c0f\u7aef\u683c\u5f0f\uff0c\u8bfb\u51fa\u6765\u7684\u6570\u636e\u5e94\u8be5\u662f\uff1a EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 \u6570\u636e\u5206\u533a \u5206\u533aGUID \u8d77\u59cbLBA \u672b\u5c3eLBA \u5c5e\u6027 \u5206\u533a\u540d\uff1afsbl1 \u7b2c\u56db\u90e8\u5206\uff1a \u5206\u533a\u7c7b\u578bGUID\uff0c\u539f\u59cb\u6570\u636e\u662f\uff1a 0FC63DAF-8483-4772-8E79-3D69D8477DE4 \u6570\u636e\u5206\u533a\u3002Linux\u66fe\u7ecf\u4f7f\u7528\u548cWindows\u57fa\u672c\u6570\u636e\u5206\u533a\u76f8\u540c\u7684GUID\u3002 \u8fd9\u4e2a\u65b0\u7684GUID\u662f\u7531 GPT fdisk \u548c GNU Parted \u5f00\u53d1\u8005\u6839\u636eLinux\u4f20\u7edf\u7684\"8300\"\u5206\u533a\u4ee3\u7801\u53d1\u660e\u7684\u3002 \u53c2\u8003\uff1a \uf0c1 \u5168\u5c40\u552f\u4e00\u6807\u8bc6\u5206\u533a\u8868 Unified Extensible Firmware Interface Specification GPT\u78c1\u76d8\u4ecb\u7ecd [UEFI\u5b9e\u6218](http://www.cppblog.com/djxzh/archive/2011/10/02/157325.html) Windows GPT\u78c1\u76d8GUID\u7ed3\u6784\u8be6\u89e3 \u4e3b\u5f15\u5bfc\u8bb0\u5f55 \u5168\u5c40\u552f\u4e00\u6807\u8bc6\u5206\u533a\u8868 GPT\u5206\u533a\u8868 A Quick Tour of GUID Partition Table (GPT) Disk Format GUID Partition Table","title":"\u89e3\u6790SD\u5361"},{"location":"user/sd/#windowwinhex","text":"\u628a\u70e7\u5f55\u4e86\u56fa\u4ef6\u7684SD\u5361\u901a\u8fc7\u8bfb\u5361\u5668\u63d2\u5230Win7\uff0c\u7531\u4e8ewindow\u4e0d\u652f\u6301SD\u5361\u4e2d\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e0d\u80fd\u901a\u8fc7\u6587\u4ef6\u7ba1\u7406\u5668\u6253\u5f00\u67e5\u770bSD\u5361\uff0c\u5728\u6211\u7684\u7535\u8111\u4e0a\u4f1a\u5f39\u51fa\u5982\u4e0b\u5bf9\u8bdd\u6846\uff1a \u4f46\u662f\u53ef\u4ee5\u7528WinHex\u6253\u5f00\uff0c\u6253\u5f00\u540e\u5982\u4e0b\uff1a \u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230\uff0cSD\u5361\u88ab\u5206\u4e3a\u4e869\u4e2a\u533a\u3002\u5176\u4e2d4\u30015\u30016\u30017\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c\u4f7f\u7528\u4e86Ext4\u683c\u5f0f\u3002","title":"\u5728window\u4e2d\u7528WinHex\u67e5\u770b"},{"location":"user/sd/#linux","text":"\u628a\u6709\u56fa\u4ef6\u7684SD\u5361\u7528\u8bfb\u5361\u5668\u63a5\u5230Linux PC\uff0c\u4f1a\u67094\u4e2a\u78c1\u76d8\uff0c\u5982\u4e0b\uff1a \u6b63\u597d\u4e0ewin7\u4e2d\u7528winHex\u6253\u5f00\uff0c\u770b\u5230\u76844\u4e2aExt4\u683c\u5f0f\u7684\u5206\u533a\u5bf9\u5e94\uff0c 4\u4e2a\u5206\u533a\u4e2d\u7684\u6587\u4ef6\u4e3a\uff1a","title":"\u5728Linux\u4e2d\u901a\u8fc7\u6587\u4ef6\u7ba1\u7406\u5668\u67e5\u770b"},{"location":"user/sd/#1bootfs","text":"","title":"1.bootfs"},{"location":"user/sd/#2rootfs","text":"","title":"2.rootfs"},{"location":"user/sd/#3userfs","text":"","title":"3.userfs"},{"location":"user/sd/#4vendorfs","text":"","title":"4.vendorfs"},{"location":"user/sd/#gpt","text":"","title":"GPT"},{"location":"user/sd/#1","text":"\u4eceSD\u5361\u542f\u52a8\u7684\u6d41\u7a0b\uff1a bootrom \u4eceSD\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u7684FSBL\uff0c\u4e5f\u5c31\u662fuboot spl,\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf\uff0c FSBL\u518d\u4eceSD\u5361\u8bfb\u53d6SSBL\uff0cuboot\u90e8\u5206\uff0c\u4e5f\u662f\u6ca1\u6709\u6587\u4ef6\u7cfb\u7edf FSBL\u662f\u5728DRAM\u8dd1\u7684\uff0c\u53ef\u662f\u5b9e\u73b0\u6bd4\u8f83\u590d\u6742\u7684\u5e94\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u652f\u6301\u6587\u4ef6\u7cfb\u7edf\uff0c\u6240\u4ee5FSBL\u4eceSD\u5361\u4e2d\u7684\u5206\u533a\u8868\u8bfb\u53d6\u5176\u4ed6\u7684\u542f\u52a8\u4fe1\u606f\u6839\u5185\u6838\uff0c\u542f\u52a8\u5185\u6838 \u90a3\u600e\u4e48\u4eceSD\u5361\u4e2d\u5b9a\u4f4dFSBL\u3001SSBL\uff1f","title":"1.\u542f\u52a8\u6d41\u7a0b"},{"location":"user/sd/#2","text":"\u8fd9\u4e2a\u8ddf\u78c1\u76d8\u5206\u533a\u6709\u5173\uff0cSTM32MP157\u7528\u7684\u662fGPT\u5206\u533a\uff0c\u5728SD\u5361\u7684\u524d\u51e0\u4e2a\u5206\u533a\u6709SD\u5361\u7684\u5206\u533a\u4fe1\u606f\uff0c\u4ece\u8fd9\u4e9b\u4fe1\u606f\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9b\u4fe1\u606f\u5b58\u653e\u5728\u54ea\u91cc\uff0cGPT\u5206\u533a\u7ed3\u6784\u5982\u4e0b\uff1a GPT\u5206\u533a\u7684\u5206\u533a\u8868\uff1a LBA 0 \u4fdd\u62a4\u6027MBR LBA 1 GPT\u5934 LBA 2-33 \u5206\u533a\u8868\u9879\uff0c\u8bb0\u5f55\u4e86\u5404\u4e2a\u5206\u533a\u7684\u4fe1\u606f \u5206\u533a LBA -33 - -1 \u662fGPT\u5934\u8ddf\u5206\u533a\u8868\u9879\u7684\u5907\u4efd\u90e8\u5206","title":"2.\u78c1\u76d8\u5206\u533a"},{"location":"user/sd/#lba-0","text":"\u4fdd\u62a4\u6027 MBR (Protective MBR )\uff0c\u5728\u78c1\u76d8\u7684\u7b2c\u4e00\u4e2a\u6247\u533a\uff08LBA 0\uff09\uff0cProtective MBR \u7684\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u200b STM32MP SD\u5361\u4e2d\u4fdd\u62a4\u6027MBR\u4e3a\uff1a 00 00 00 00 ee 00 00 00 01 00 00 00 ff cb da 01 \u5176\u4e2d0xee\u503c\u6807\u6ce8\u4e86\u8be5\u5206\u533a\u4e3aGPT\u5206\u533a","title":"LBA 0"},{"location":"user/sd/#lba-1","text":"GPT\u5934\uff0c\u4e0b\u56fe\u662fSTM32MPU1 SD\u5361\u4e2d\u7684LBA 1\u4e2d\u7684\u6570\u636e\uff1a \u524d8\u5b57\u8282\u662f\u7b7e\u540d\uff08Signature\uff09\uff0c EFI PART \uff080x5452415020494645\uff09\uff0c 4\u5b57\u8282\u7684\u7248\u672c\u53f7\uff1a0x00010000 4\u81ea\u5df1\u7684GPT header\u5927\u5c0f\uff1a0x0000005c\uff0c92\u5b57\u8282\uff0c 4\u5b57\u8282\u7684HeaderCRC32 4\u5b57\u8282\u4fdd\u7559\uff0c\u4e3a0x00 8\u5b57\u8282\u5730\u5740\uff0c\u5f53\u524d\u6570\u636e\u6240\u5728\u7684LBA 8\u5b57\u8282\u5730\u5740\uff0cGPT Header\u5907\u4efd\u6240\u5728LBA\uff0c\u8fd9\u91cc\u662f0x1dacbff\uff0c\u4e0b\u56fe\u662fWinHex\u4e2d\u7684\u7b2c0x1dacbff\u6247\u533a\u7684\u6570\u636e\uff1a 8\u5b57\u8282\u5730\u5740\uff0c\u7b2c\u4e00\u4e2a\u5206\u533a\u6240\u5728\u5730\u5740\uff0c0x00000000 00000022\uff0c\u5341\u8fdb\u5236\u662f34\uff0c\u5728WinHex\u4e2d\u8df3\u8f6c\u523034\u6247\u533a\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a\u6b63\u597d\u662fPartition 1\u6240\u5728\u7684\u4f4d\u7f6e\uff0c 8\u5b57\u8282\u5730\u5740\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u533a\u6240\u5728\u5730\u5740\uff1a0x00000000 01dacbde 16\u5b57\u8282\uff0c\u78c1\u76d8\u7684GUID\uff0c\u5373\u552f\u4e00\u6807\u8bc6\u7b26 GPT\u5165\u53e3\uff0c\u5373\u5f00\u59cb\u6240\u5728\u7684LBA 4\u5b57\u8282\uff1a0x00 00 00 80 = 128\uff0c\u5206\u533a\u8868\u603b\u9879\u6570\uff0c\u901a\u5e38\u9650\u5b9a\u4e3a\u201c80 00 00 00\u201d(0x80)\uff0c\u4e5f\u5c31\u662f128\u4e2a\u3002 4\u5b57\u8282\uff0c\u6bcf\u4e2a\u5206\u533a\u8868\u9879\u5360\u7528\u5b57\u8282\u6570\uff0c\u901a\u5e38\u9650\u5b9a\u4e3a\u201c80 00 00 00\u201d(0x80)\uff0c\u4e5f\u5c31\u662f128\u5b57\u8282\u3002 4\u5b57\u8282\uff0cPartitionEntryArrayCRC32\uff0c\u5206\u533a\u8868CRC\u6821\u9a8c\u548c \u4e3a\u4e86\u51cf\u5c11\u5206\u533a\u8868\u635f\u574f\u7684\u98ce\u9669\uff0cGPT\u5728\u786c\u76d8\u6700\u540e\u4fdd\u5b58\u4e86\u4e00\u4efd\u5206\u533a\u8868\u7684\u526f\u672c\u3002(GPT\u6570\u636e\u7ed3\u6784\u5728\u78c1\u76d8\u4e0a\u5b58\u50a8\u4e24\u6b21\uff1a\u5f00\u59cb\u548c\u7ed3\u675f\u5404\u4e00\u6b21\u3002)","title":"LBA 1"},{"location":"user/sd/#3","text":"","title":"3  \u5206\u533a\u8868\u9879"},{"location":"user/sd/#_1","text":"\u5206\u533a\u8868\u7684\u683c\u5f0f\u5982\u4e0b\uff1a \u7b2c\u4e00\u4e2a\u662f\u5206\u533a\u7c7b\u578bGUID\uff0c16\u5b57\u8282 \u7b2c\u4e8c\u4e2a\u662f\u5206\u533aGUID\uff0c16\u5b57\u8282 \u7b2c\u4e09\u4e2a\u662f\u8d77\u59cbLBA\uff0c8\u5b57\u8282\uff0c \u7b2c\u56db\u4e2a\u662f\u672b\u5c3eLBA\uff0c8\u5b57\u8282\uff0c \u7b2c\u4e94\u4e2a\u662f\u5c5e\u6027\uff0c \u7b2c\u516d\u90e8\u5206\u662f\u5206\u533a\u540d","title":"\u5206\u533a\u8868\u7684\u683c\u5f0f"},{"location":"user/sd/#stm32mpu","text":"\u7b2c\u4e00\u90e8\u5206\uff1a \u5206\u533a\u7c7b\u578bGUID\uff0c\u539f\u59cb\u6570\u636e\u662f\uff1a a2 a0 d0 eb e5 b9 33 44 87 c0 68 b6 b7 26 99 c7 \u7531\u4e8e\u8fd9\u91cc\u662f\u5c0f\u7aef\u683c\u5f0f\uff0c\u8bfb\u51fa\u6765\u7684\u6570\u636e\u5e94\u8be5\u662f\uff1a EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 \u6570\u636e\u5206\u533a \u5206\u533aGUID \u8d77\u59cbLBA \u672b\u5c3eLBA \u5c5e\u6027 \u5206\u533a\u540d\uff1afsbl1 \u7b2c\u56db\u90e8\u5206\uff1a \u5206\u533a\u7c7b\u578bGUID\uff0c\u539f\u59cb\u6570\u636e\u662f\uff1a 0FC63DAF-8483-4772-8E79-3D69D8477DE4 \u6570\u636e\u5206\u533a\u3002Linux\u66fe\u7ecf\u4f7f\u7528\u548cWindows\u57fa\u672c\u6570\u636e\u5206\u533a\u76f8\u540c\u7684GUID\u3002 \u8fd9\u4e2a\u65b0\u7684GUID\u662f\u7531 GPT fdisk \u548c GNU Parted \u5f00\u53d1\u8005\u6839\u636eLinux\u4f20\u7edf\u7684\"8300\"\u5206\u533a\u4ee3\u7801\u53d1\u660e\u7684\u3002","title":"STM32MPU\u4e2d\u7684\u5206\u533a\u8868\u9879"},{"location":"user/sd/#_2","text":"\u5168\u5c40\u552f\u4e00\u6807\u8bc6\u5206\u533a\u8868 Unified Extensible Firmware Interface Specification GPT\u78c1\u76d8\u4ecb\u7ecd [UEFI\u5b9e\u6218](http://www.cppblog.com/djxzh/archive/2011/10/02/157325.html) Windows GPT\u78c1\u76d8GUID\u7ed3\u6784\u8be6\u89e3 \u4e3b\u5f15\u5bfc\u8bb0\u5f55 \u5168\u5c40\u552f\u4e00\u6807\u8bc6\u5206\u533a\u8868 GPT\u5206\u533a\u8868 A Quick Tour of GUID Partition Table (GPT) Disk Format GUID Partition Table","title":"\u53c2\u8003\uff1a"}]}